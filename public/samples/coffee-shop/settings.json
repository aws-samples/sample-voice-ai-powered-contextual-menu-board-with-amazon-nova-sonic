{
  "exportVersion": "1.0",
  "exportDate": "2025-01-15T00:00:00.000Z",
  "appVersion": "1.0.0",
  "settings": {
    "cognito": {
      "userPoolId": "",
      "userPoolClientId": "",
      "identityPoolId": "",
      "region": "us-east-1"
    },
    "agent": {
      "system_prompt": "You are Maya, a friendly and knowledgeable barista at Artisan Coffee Co. Your goal is to help customers create the perfect coffee experience through natural conversation.\n\nYour personality:\n- Warm, welcoming, and passionate about coffee\n- Knowledgeable about coffee origins, brewing methods, and flavor profiles\n- Helpful with recommendations based on customer preferences\n- Enthusiastic about seasonal specials and new arrivals\n\nSteps to create the perfect coffee experience:\nStep 1. Greet customers warmly and ask about their coffee preferences or mood\nStep 2. Listen carefully to their preferences (strength, flavor, temperature, dietary needs)\nStep 3. Use GetMenuItems to access our current coffee menu and seasonal offerings\nStep 4. Make personalized recommendations based on their preferences\nStep 5. Explain drink options, customizations, and any special ingredients\nStep 6. Help them build their perfect drink with AddToCart\nStep 7. Suggest complementary items like pastries or snacks\nStep 8. Confirm their order and provide an estimated wait time\nStep 9. Use SubmitOrder when they're ready to complete their purchase\nStep 10. Thank them and let them know their drink will be ready soon\n\nPRO TIPS:\n1. Always ask about preferences first - hot/iced, strong/mild, sweet/unsweetened\n2. Recommend seasonal drinks and explain what makes them special\n3. Offer milk alternatives and explain the flavor differences\n4. Suggest size upgrades or add-ons that enhance the experience\n5. Share coffee knowledge when appropriate (origin stories, brewing methods)\n6. Use ShowCategoryItems to display relevant drink categories\n7. Always use GetCurrentCartItems for accurate totals\n8. Create a welcoming coffeehouse atmosphere through conversation\n\nIMPORTANT:\n- Never calculate prices yourself - always use the cart tools\n- Focus on coffee expertise and creating a premium experience\n- Ask about dietary restrictions and allergies\n- Explain the difference between our signature drinks\n- When AddToCart returns combo information, share the savings with excitement",
      "tools": [
        {
          "tool_name": "GetDateAndTime",
          "description": "Get current date and time for seasonal recommendations",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed\");\n  const date = new Date().toLocaleString(\"en-US\", { timeZone: \"America/New_York\" });\n  const nyDate = new Date(date);\n  return JSON.stringify({ date: nyDate.toISOString(), season: getSeason(nyDate) });\n}\n\nfunction getSeason(date) {\n  const month = date.getMonth() + 1;\n  if (month >= 3 && month <= 5) return 'Spring';\n  if (month >= 6 && month <= 8) return 'Summer';\n  if (month >= 9 && month <= 11) return 'Fall';\n  return 'Winter';\n}",
          "run_after_app_init": false,
          "order": 1
        },
        {
          "tool_name": "GetMenuItems",
          "description": "Get all coffee menu items including seasonal specials",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" loading coffee menu\");\n  \n  try {\n    const coffeeItems = [\n      {\n        id: \"espresso\",\n        name: \"Espresso\",\n        description: \"Rich, bold shot of our signature blend\",\n        price: 2.50,\n        category: \"Espresso\",\n        image: \"/images/espresso.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"double-shot\", name: \"Double Shot\", price: 1.00, type: \"addition\" },\n          { id: \"decaf\", name: \"Decaffeinated\", price: 0.00, type: \"modification\" }\n        ]\n      },\n      {\n        id: \"americano\",\n        name: \"Americano\",\n        description: \"Espresso with hot water, smooth and strong\",\n        price: 3.25,\n        category: \"Coffee\",\n        image: \"/images/americano.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"iced\", name: \"Iced\", price: 0.00, type: \"modification\" },\n          { id: \"extra-shot\", name: \"Extra Shot\", price: 0.75, type: \"addition\" },\n          { id: \"oat-milk\", name: \"Oat Milk\", price: 0.60, type: \"milk\" },\n          { id: \"almond-milk\", name: \"Almond Milk\", price: 0.60, type: \"milk\" }\n        ]\n      },\n      {\n        id: \"latte\",\n        name: \"Caffe Latte\",\n        description: \"Espresso with steamed milk and light foam\",\n        price: 4.50,\n        category: \"Lattes\",\n        image: \"/images/latte.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"iced\", name: \"Iced\", price: 0.00, type: \"modification\" },\n          { id: \"vanilla\", name: \"Vanilla Syrup\", price: 0.50, type: \"syrup\" },\n          { id: \"caramel\", name: \"Caramel Syrup\", price: 0.50, type: \"syrup\" },\n          { id: \"hazelnut\", name: \"Hazelnut Syrup\", price: 0.50, type: \"syrup\" },\n          { id: \"oat-milk\", name: \"Oat Milk\", price: 0.60, type: \"milk\" },\n          { id: \"coconut-milk\", name: \"Coconut Milk\", price: 0.60, type: \"milk\" },\n          { id: \"extra-hot\", name: \"Extra Hot\", price: 0.00, type: \"temperature\" }\n        ]\n      },\n      {\n        id: \"cappuccino\",\n        name: \"Cappuccino\",\n        description: \"Equal parts espresso, steamed milk, and foam\",\n        price: 4.25,\n        category: \"Lattes\",\n        image: \"/images/cappuccino.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"cinnamon\", name: \"Cinnamon Dust\", price: 0.00, type: \"topping\" },\n          { id: \"chocolate\", name: \"Chocolate Powder\", price: 0.25, type: \"topping\" },\n          { id: \"oat-milk\", name: \"Oat Milk\", price: 0.60, type: \"milk\" }\n        ]\n      },\n      {\n        id: \"mocha\",\n        name: \"Cafe Mocha\",\n        description: \"Espresso with chocolate and steamed milk\",\n        price: 5.25,\n        category: \"Specialty\",\n        image: \"/images/mocha.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"whipped-cream\", name: \"Whipped Cream\", price: 0.50, type: \"topping\" },\n          { id: \"dark-chocolate\", name: \"Dark Chocolate\", price: 0.25, type: \"modification\" },\n          { id: \"iced\", name: \"Iced\", price: 0.00, type: \"modification\" }\n        ]\n      },\n      {\n        id: \"cold-brew\",\n        name: \"Cold Brew\",\n        description: \"Smooth, slow-steeped coffee served over ice\",\n        price: 3.75,\n        category: \"Cold Coffee\",\n        image: \"/images/cold-brew.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"vanilla-cream\", name: \"Vanilla Sweet Cream\", price: 0.75, type: \"addition\" },\n          { id: \"oat-milk\", name: \"Oat Milk\", price: 0.60, type: \"milk\" }\n        ]\n      },\n      {\n        id: \"seasonal-pumpkin\",\n        name: \"Pumpkin Spice Latte\",\n        description: \"Fall favorite with pumpkin, cinnamon, and nutmeg\",\n        price: 5.75,\n        category: \"Seasonal\",\n        image: \"/images/pumpkin-latte.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-spice\", name: \"Extra Spice\", price: 0.25, type: \"addition\" },\n          { id: \"whipped-cream\", name: \"Whipped Cream\", price: 0.50, type: \"topping\" },\n          { id: \"iced\", name: \"Iced\", price: 0.00, type: \"modification\" }\n        ]\n      },\n      {\n        id: \"croissant\",\n        name: \"Butter Croissant\",\n        description: \"Flaky, buttery French pastry\",\n        price: 3.25,\n        category: \"Pastries\",\n        image: \"/images/croissant.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"warmed\", name: \"Warmed\", price: 0.00, type: \"preparation\" }\n        ]\n      },\n      {\n        id: \"blueberry-muffin\",\n        name: \"Blueberry Muffin\",\n        description: \"Fresh baked with Maine blueberries\",\n        price: 2.95,\n        category: \"Pastries\",\n        image: \"/images/muffin.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"warmed\", name: \"Warmed\", price: 0.00, type: \"preparation\" }\n        ]\n      }\n    ];\n    \n    components.menu.clearMenu();\n    components.menu.addItems(coffeeItems);\n    components.menu.setActiveCategory(\"All Items\");\n    \n    components.ui.showNotification(\n      `â˜• Loaded ${coffeeItems.length} coffee menu items!`, \n      \"success\"\n    );\n    \n    return JSON.stringify({\n      success: true,\n      itemsLoaded: coffeeItems.length,\n      categories: components.menu.getAllCategories(),\n      menu: coffeeItems.map(item => ({ ...item, image: null }))\n    });\n    \n  } catch (error) {\n    components.ui.showNotification(\"Failed to load coffee menu\", \"error\");\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": true,
          "order": 2
        },
        {
          "tool_name": "AddToCart",
          "description": "Add coffee items to cart with customizations",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Array of coffee items to add to cart\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"properties\": {\n        \"itemId\": {\n          \"type\": \"string\",\n          \"description\": \"ID of the coffee item from menu\"\n        },\n        \"quantity\": {\n          \"type\": \"number\",\n          \"description\": \"Quantity to add\",\n          \"default\": 1\n        },\n        \"customizations\": {\n          \"type\": \"array\",\n          \"description\": \"Array of customization IDs\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": { \n                \"type\": \"string\",\n                \"description\": \"Customization ID from availableCustomizations\"\n              }\n            },\n            \"required\": [\"id\"]\n          }\n        }\n      },\n      \"required\": [\"itemId\"]\n    }\n  },\n  \"required\": [\"items\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    const items = input.items;\n    const processedItems = [];\n    \n    for(const element of items) {\n      const item = components.menu.getItemById(element.itemId);\n      \n      if (!item) {\n        components.ui.showNotification(`Item \"${element.itemId}\" not found`, \"error\");\n        continue;\n      }\n\n      const customizations = [];\n      if (Array.isArray(element.customizations)) {\n        for (const cRequested of element.customizations) {\n          const foundCustomization = item.availableCustomizations.find(c => \n            cRequested.id === c.id\n          );\n          if (foundCustomization) {\n            customizations.push(foundCustomization);\n          }\n        }\n      }\n\n      const result = components.cart.addToCart(\n        String(item.id),\n        item.name,\n        item.price,\n        element.quantity || 1,\n        customizations\n      );\n\n      const customizationText = customizations.length > 0 \n        ? ` with ${customizations.map(c => c.name).join(', ')}`\n        : '';\n      \n      components.ui.showNotification(\n        `Added ${element.quantity || 1}x ${item.name}${customizationText}`, \n        \"success\"\n      );\n\n      processedItems.push({\n        itemId: element.itemId,\n        itemName: item.name,\n        quantity: element.quantity || 1,\n        customizations: customizations\n      });\n    }\n\n    const cartSummary = components.cart.getOrderSummary();\n    \n    return JSON.stringify({\n      success: true,\n      processedItems: processedItems,\n      cartSummary: cartSummary\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    components.ui.showNotification(\"Failed to add item to cart\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 3
        },
        {
          "tool_name": "GetCurrentCartItems",
          "description": "Get current cart contents and total",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed\");\n  \n  const orderSummary = components.cart.getOrderSummary();\n  \n  return JSON.stringify({\n    success: true,\n    cartSummary: orderSummary\n  });\n}",
          "run_after_app_init": false,
          "order": 4
        },
        {
          "tool_name": "ShowCategoryItems",
          "description": "Display items from a specific category",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"Category name to display (e.g., 'Lattes', 'Cold Coffee', 'Seasonal')\"\n    }\n  },\n  \"required\": [\"category\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" showing category:\", input.category);\n  \n  try {\n    components.menu.showCategory(input.category);\n    const items = components.menu.getMenuItems(input.category);\n    \n    components.ui.showNotification(\n      `Showing ${items.length} items in ${input.category}`, \n      \"info\"\n    );\n    \n    return JSON.stringify({\n      success: true,\n      category: input.category,\n      itemCount: items.length,\n      items: items.map(item => ({\n        id: item.id,\n        name: item.name,\n        description: item.description,\n        price: item.price\n      }))\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 5
        }
      ],
      "enableSentimentAnalysis": false,
      "autoInitiateConversation": false,
      "initiationAudio": "",
      "companyName": "Artisan Coffee Co."
    }
  }
}