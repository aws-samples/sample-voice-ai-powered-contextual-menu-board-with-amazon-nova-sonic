{
  "exportVersion": "1.0",
  "exportDate": "2025-09-26T05:05:13.883Z",
  "appVersion": "1.0.0",
  "settings": {
    "cognito": {
      "userPoolId": "us-east-1_jQtehUKpR",
      "userPoolClientId": "5ku2niqnrslu176ilag62knt66",
      "identityPoolId": "us-east-1:65631f53-a3e9-4a3d-b4b2-3e117cb8463a",
      "region": "us-east-1"
    },
    "agent": {
      "system_prompt": "You are a Hotel Room Service Concierge. Your goal is to assist hotel guests with their in-room service requests using professional and courteous communication to fulfill their needs.\n\nCRITICAL FIRST STEP: Before providing ANY services, you MUST collect the guest's room number using the GetRoomNumber tool. Do not proceed with any service requests until the room number is confirmed.\n\nSteps to Successfully Handle a Room Service Request:\nStep 1. Always provide a warm, professional welcome and immediately ask for the guest's room number.\nStep 2. Validate and store the room number, then call GetCustomerLoyaltyInfo to get details about their status.\nStep 3. PERSONALIZED GREETING: After GetRoomNumber tool succeeds, provide a personalized greeting based on the returned guest and loyalty information and then ask what service category they would like to request:\n   - If guest info found: \"Welcome back, [Guest Name]! Thank you for staying with us in Room [Number].\"\n   - If loyalty info found: Add \"As a [Status] member with [Points] points, we're delighted to serve you.\"\n   - If no guest info: Use standard greeting \"Thank you for choosing our hotel for Room [Number].\"\nStep 4. Listen carefully and politely acknowledge what you've heard from the guest before using any tools.\nStep 5. Get the entire menu using the GetMenuItems for you to get the full list of available products.\nStep 6. Analyze the guest's request and execute the appropriate tools to assist them.\nStep 7. After adding items to cart, ask the guest to review their order and confirm before submitting.\nStep 8. Always ask for confirmation before submitting any orders - never auto-submit\nStep 9. For spa services, ensure you collect their preferred time slot and confirm availability before adding to cart.\nStep 10. Provide the guest with estimated delivery/service time and any special instructions.\nStep 11. Only after completing the service request, finalize the session with the appropriate tool.\n\n✅ Pro Tips:\n- Do not ask for room number multiple times - once GetRoomNumber tool succeeds, proceed with services\n- Room number must be 3-4 digits (e.g., 101, 1205)\n- Review the service request with the guest and confirm all details, including any special preferences or customizations\n- For housekeeping services, remind guests these are complimentary hotel amenities\n- If a guest requests a specific customization that doesn't exist in the menu, AUTOMATICALLY use the 'special-instructions' customization to capture their request as additional notes\n- Never tell guests that a customization isn't available - always use special-instructions to capture any custom requests\n- For example: if guest asks for 'mirror cleaning' or 'extra pillows', add these as special-instructions automatically\n- Use professional hospitality language — avoid technical terms or tool/system errors\n- Maintain the luxury hotel experience throughout the interaction\n- Remember: Ask for room number → Call GetRoomNumber tool → Personalized greeting → Proceed with services\n- FOR BEST USER EXPERIENCE proactively use ShowCategoryItems along the interaction, don't wait for the customer to ask you to show them the items in a specific category. ALSO If the customer is interested in a specific category, use it right away.",
      "tools": [
        {
          "tool_name": "GetRoomNumber",
          "description": "Collects and validates the guest's room number, fetches guest information and loyalty status for personalized service. This tool MUST be called before any service requests.",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"roomNumber\": {\n      \"type\": \"string\",\n      \"description\": \"The guest's room number (3-4 digits)\",\n      \"pattern\": \"^\\\\d{3,4}$\"\n    }\n  },\n  \"required\": [\"roomNumber\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName, utils, auth, axios, globals } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    const roomNumber = input.roomNumber;\n    \n    // Validate room number format\n    if (!roomNumber || !/^\\d{3,4}$/.test(roomNumber)) {\n      components.ui.showNotification(\"Invalid room number format\", \"error\");\n      return JSON.stringify({\n        success: false,\n        error: \"Room number must be 3-4 digits (e.g., 101, 1205)\"\n      });\n    }\n    \n    // Store room number in session\n    utils.storage.setData('guestRoomNumber', roomNumber);\n    \n    // Fetch room booking information\n    let guestInfo = null;\n    let loyaltyInfo = null;\n    \n    try {\n      const tokens = await auth.getTokens();\n      console.log(\"Tool::Script::\" + toolName + \" tokens available:\", tokens ? \"yes\" : \"no\");\n      console.log(\"Tool::Script::\" + toolName + \" idToken exists:\", tokens.idToken ? \"yes\" : \"no\");\n      console.log(\"Tool::Script::\" + toolName + \" roomBookingAPIURL:\", globals.roomBookingAPIURL);\n      \n      if (tokens.idToken && globals.roomBookingAPIURL) {\n        console.log(\"Tool::Script::\" + toolName + \" fetching room booking for:\", roomNumber);\n        \n        const bookingResponse = await axios.get(`${globals.roomBookingAPIURL}?roomNumber=${roomNumber}`, {\n          headers: {\n            \"Authorization\": `${tokens.idToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        \n        console.log(\"Tool::Script::\" + toolName + \" booking API response status:\", bookingResponse.status);\n        console.log(\"Tool::Script::\" + toolName + \" booking API response data:\", JSON.stringify(bookingResponse.data, null, 2));\n        \n        if (bookingResponse.data.found) {\n          guestInfo = bookingResponse.data.booking;\n          console.log(\"Tool::Script::\" + toolName + \" found guest:\", guestInfo.guestName);\n          console.log(\"Tool::Script::\" + toolName + \" guest phone:\", guestInfo.phone);\n          console.log(\"Tool::Script::\" + toolName + \" guest customerId:\", guestInfo.customerId);\n          \n          // Store guest info in session\n          utils.storage.setData('guestInfo', JSON.stringify(guestInfo));\n          \n          // Fetch loyalty information using phone (primary) or customerId (fallback)\n          if (globals.loyaltyAPIURL) {\n            let loyaltyURL = null;\n            let lookupMethod = null;\n            \n            if (guestInfo.phone) {\n              loyaltyURL = `${globals.loyaltyAPIURL}?phone=${encodeURIComponent(guestInfo.phone)}`;\n              lookupMethod = \"phone\";\n            } else if (guestInfo.customerId) {\n              loyaltyURL = `${globals.loyaltyAPIURL}?customerId=${guestInfo.customerId}`;\n              lookupMethod = \"customerId\";\n            }\n            \n            if (loyaltyURL) {\n              console.log(\"Tool::Script::\" + toolName + \" fetching loyalty using\", lookupMethod + \":\", loyaltyURL);\n              \n              const loyaltyResponse = await axios.get(loyaltyURL, {\n                headers: {\n                  \"Authorization\": `${tokens.idToken}`,\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n              \n              console.log(\"Tool::Script::\" + toolName + \" loyalty API response status:\", loyaltyResponse.status);\n              console.log(\"Tool::Script::\" + toolName + \" loyalty API response data:\", JSON.stringify(loyaltyResponse.data, null, 2));\n              \n              if (loyaltyResponse.data.found) {\n                loyaltyInfo = loyaltyResponse.data.customer;\n                console.log(\"Tool::Script::\" + toolName + \" found loyalty status:\", loyaltyInfo.loyaltyStatus);\n                console.log(\"Tool::Script::\" + toolName + \" loyalty points:\", loyaltyInfo.loyaltyPoints);\n                console.log(\"Tool::Script::\" + toolName + \" customer name:\", loyaltyInfo.name);\n                \n                // Store loyalty info in session\n                utils.storage.setData('loyaltyInfo', JSON.stringify(loyaltyInfo));\n              } else {\n                console.log(\"Tool::Script::\" + toolName + \" loyalty not found for\", lookupMethod);\n              }\n            } else {\n              console.log(\"Tool::Script::\" + toolName + \" no phone or customerId available for loyalty lookup\");\n            }\n          } else {\n            console.log(\"Tool::Script::\" + toolName + \" loyaltyAPIURL not configured\");\n          }\n        } else {\n          console.log(\"Tool::Script::\" + toolName + \" room booking not found for room:\", roomNumber);\n        }\n      } else {\n        console.log(\"Tool::Script::\" + toolName + \" missing tokens or roomBookingAPIURL\");\n      }\n    } catch (apiError) {\n      console.error(\"Tool::Script::\" + toolName + \" API error:\", apiError);\n      console.error(\"Tool::Script::\" + toolName + \" API error message:\", apiError.message);\n      console.error(\"Tool::Script::\" + toolName + \" API error response:\", apiError.response?.data);\n      console.error(\"Tool::Script::\" + toolName + \" API error status:\", apiError.response?.status);\n    }\n    \n    // Show success notification\n    if (guestInfo && loyaltyInfo) {\n      components.ui.showNotification(\n        `Welcome back, ${guestInfo.guestName}! ${loyaltyInfo.loyaltyStatus} member confirmed for Room ${roomNumber}`, \n        \"success\"\n      );\n    } else if (guestInfo) {\n      components.ui.showNotification(\n        `Room ${roomNumber} confirmed for ${guestInfo.guestName}`, \n        \"success\"\n      );\n    } else {\n      components.ui.showNotification(\n        `Room ${roomNumber} confirmed`, \n        \"success\"\n      );\n    }\n    \n    console.log(\"Tool::Script::\" + toolName + \" final result - guestInfo:\", guestInfo ? \"found\" : \"not found\");\n    console.log(\"Tool::Script::\" + toolName + \" final result - loyaltyInfo:\", loyaltyInfo ? \"found\" : \"not found\");\n    \n    return JSON.stringify({\n      success: true,\n      roomNumber: roomNumber,\n      guestInfo: guestInfo,\n      loyaltyInfo: loyaltyInfo,\n      message: guestInfo ? \n        `Room ${roomNumber} confirmed for ${guestInfo.guestName}` : \n        `Room ${roomNumber} confirmed`\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\" + toolName + \" error:\", error);\n    components.ui.showNotification(\"Failed to validate room number\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}\n",
          "run_after_app_init": false,
          "order": 1
        },
        {
          "tool_name": "GetDateAndTime",
          "description": "This tool will return the date and time for agent awareness",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "// Your JavaScript code here\nasync function execute({...args}) {\n  const { input, sessionId, toolName, ...components} = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with args:\", args);\n\n  // Using America/Chicago for UTC-6 (Central Time)\n  const date = new Date().toLocaleString(\"en-US\", { timeZone: \"America/Chicago\" });\n  const ctDate = new Date(date);\n  return JSON.stringify({ date: ctDate.toISOString() });\n}",
          "run_after_app_init": false,
          "order": 2
        },
        {
          "tool_name": "GetMenuItems",
          "description": "This tool will pull all the menu items with all their attributes, it will also contain the item id that you can use in the cart",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { agentTriggered, axios, components, auth, toolName, globals, utils } = args;\n  //console.log(\"Tool::Script::\"+ toolName +\" with input:\", args);\n  \n  try {\n    // Show loading notification\n    components.ui.showNotification(\"Retriving menu...\", \"info\");\n    // Get Cognito access token for API Gateway authentication\n    const tokens = await auth.getTokens();\n    if (!tokens.idToken) {\n      throw new Error(\"No access token available\");\n    }\n\n    console.log(\"Tool::Script::\"+ toolName +\" idToken:\", tokens.idToken);\n\n    // Make authenticated API call to your API Gateway\n    const menu = utils.storage.getData('cachedMenu');\n    var response = {};\n    if(!menu){\n      response = await axios.get(globals.menuAPIURL, {\n        headers: {\n          \"Authorization\": `${tokens.idToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      utils.storage.setData('cachedMenu', JSON.stringify(response), 2);\n      console.log(\"Tool::Script::\"+ toolName +\" storing menu in cache\");\n    }else{\n      console.log(\"Tool::Script::\"+ toolName +\" get menu from cache\");\n      response = JSON.parse(menu);\n    }\n    \n    \n    var items = [];\n    if(response.data.items.length){\n      items = [...new Set(response.data.items.map((item) => {\n        return {\n          ...item,\n          available: true,\n        }\n      }))]\n    }\n    \n    // Avoid reloading elements in the view\n    // Only if is not triggered by the agent, the menu will be cleared out\n    if(!agentTriggered){\n      // Clear existing menu and add sample items\n      components.menu.clearMenu();\n      components.menu.addItems(items);\n      \n      // Show success notification\n      components.ui.showNotification(\n        `Loaded ${items.length} menu items successfully!`, \n        \"success\"\n      );\n\n      components.menu.setActiveCategory(\"All Items\");\n\n    }else{\n      // Show success notification\n      components.ui.showNotification(\n        `The agent got the updated menu!`, \n        \"success\"\n      );\n    }\n    \n    const result = JSON.stringify({\n      success: true,\n      itemsLoaded: items.length,\n      categories: components.menu.getAllCategories(),\n      menu: [... new Set(items.map((item) => {\n        // Avoid image urls to be returned to the model for token optimization.\n        return {\n          ...item,\n          image: null\n        };\n      }))]\n    });\n    \n    return result;\n    \n  } catch (error) {\n    components.ui.showNotification(\"Failed to load sample menu\", \"error\");\n    console.log(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": true,
          "order": 3
        },
        {
          "tool_name": "AddToCart",
          "description": "This tool will allow adding items to the cart. It requires for you to read the 'id' associated to the item selected by the customer from the menu. ",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Array of items that are needed to be added to the cart\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"properties\": {\n        \"itemId\": {\n          \"type\": \"string\",\n          \"description\": \"This is the id of the item to add from the menu items\"\n        },\n        \"quantity\": {\n          \"type\": \"number\",\n          \"description\": \"Quantity to add\",\n          \"default\": 1\n        },\n        \"customizations\": {\n          \"type\": \"array\",\n          \"description\": \"Array of customization IDs to apply to the item\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": { \n                \"type\": \"string\",\n                \"description\": \"The customization ID from the menu item's availableCustomizations\"\n              }\n            },\n            \"required\": [\"id\"]\n          }\n        }\n      },\n      \"required\": [\"itemId\"]\n    }\n  },\n  \"required\": [\"items\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName, utils, auth, axios, globals } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with input:\", JSON.stringify(input, null, 2));\n\n  // Helper function to check if two customization arrays are the same\n  const customizationsMatch = (customizations1, customizations2) => {\n    if (!customizations1 && !customizations2) return true;\n    if (!customizations1 || !customizations2) return false;\n    if (customizations1.length !== customizations2.length) return false;\n    \n    // Sort both arrays by id for comparison\n    const sorted1 = [...customizations1].sort((a, b) => a.id.localeCompare(b.id));\n    const sorted2 = [...customizations2].sort((a, b) => a.id.localeCompare(b.id));\n    \n    return sorted1.every((custom1, index) => custom1.id === sorted2[index].id);\n  };\n\n  // Helper function to find existing cart item with same menuItemId and customizations\n  const findExistingCartItem = (menuItemId, customizations) => {\n    const currentCart = components.cart.getOrderSummary();\n    console.log(\"Tool::Script::\"+toolName+\" Current Order Summary:\", currentCart);\n    console.log(\"Tool::Script::\"+toolName+\" Requested MenuItemID:\", menuItemId);\n    console.log(\"Tool::Script::\"+toolName+\" Requested customizations:\", customizations);\n\n    // Log each cart item for debugging (not the cart summary itself)\n    if (currentCart.items && currentCart.items.length > 0) {\n      currentCart.items.forEach((cartItem, index) => {\n        console.log(\"Tool::Script::\"+toolName+\" Cart Item\", index, \"MenuItemID:\", cartItem.menuItemId);\n        console.log(\"Tool::Script::\"+toolName+\" Cart Item\", index, \"customizations:\", cartItem.customizations);\n      });\n    } else {\n      console.log(\"Tool::Script::\"+toolName+\" Cart is empty\");\n    }\n\n    \n    return currentCart.items.find(cartItem => \n      cartItem.menuItemId === menuItemId && \n      customizationsMatch(cartItem.customizations, customizations)\n    );\n  };\n  \n  try {\n    if(input.items.length === 0){\n      throw(\"No items passed to the tool, at least one item is needed\");\n    }\n\n    const items = input.items;\n    const itemsToAdd = [];\n    const itemsToUpdate = [];\n    const processedItems = [];\n    \n    // Initialize cartResult and comboApplied at the top\n    let cartResult = null;\n    let comboApplied = null;\n\n    // Adding items in the array one by one to the cart\n    for(const element of items){\n      // Search for the item by id\n      console.log(\"Tool::Script::\"+toolName+\" getItemById:\", element.itemId);\n      let item = components.menu.getItemById(element.itemId);\n      console.log(\"Tool::Script::\"+toolName+\" Retrieved Item :\", item);\n\n      //If the item could be found, we will try to search for it, in case the agent made a mistake while providing the id\n      if(!item){\n        console.log(\"Tool::Script::\"+toolName+\" no item found using id:\", element.itemId);\n        components.ui.showNotification(`Searching for item \"${element.itemId}\" `, \"info\");\n\n        const searchResult = components.menu.searchItems(element.itemId);\n        \n        console.log(\"Tool::Script::\"+toolName+\" product found for cart\", searchResult);\n\n        if(searchResult.length > 1){\n          return JSON.stringify({\n            success: true,\n            message: \"Confirm with the customer which menu item he is referring to\",\n            products: searchResult\n          });\n        }else{\n          console.log(\"Tool::Script::\"+toolName+\" product found for cart\", searchResult);\n          item = searchResult[0]\n        }\n      }\n\n      // If the item was not found despite the effort of searching for it\n      if (!item) {\n        components.ui.showNotification(`Item \"${element.itemId}\" not found`, \"error\");\n        return JSON.stringify({\n          success: false,\n          error: `Item '${element.itemId}' not found in menu`\n        });\n      }\n\n      // ========================================\n      // IMPROVED CUSTOMIZATION VALIDATION\n      // ========================================\n      \n      const customizations = [];\n      \n      try {\n        if (Array.isArray(element.customizations) && element.customizations.length > 0) {\n          console.log(\"Tool::Script::\"+toolName+\" validating customizations for:\", item.name);\n          console.log(\"Tool::Script::\"+toolName+\" requested customizations:\", element.customizations);\n          console.log(\"Tool::Script::\"+toolName+\" available customizations:\", item.availableCustomizations);\n          \n          // Validate each customization individually\n          for (const cRequested of element.customizations) {\n            const foundCustomization = item.availableCustomizations.find(cAvailable => \n              cRequested.id === cAvailable.id\n            );\n           \n            if (!foundCustomization) {\n              // Invalid customization - provide meaningful feedback\n              const availableCustomizationNames = item.availableCustomizations.length > 0 \n                ? item.availableCustomizations.map(c => c.name).join(', ')\n                : 'none';\n              \n              const errorMessage = item.availableCustomizations.length > 0\n                ? `\"${cRequested.id}\" customization is not available for ${item.name}. Available customizations: ${availableCustomizationNames}`\n                : `${item.name} does not have any customizations available`;\n              \n              console.log(\"Tool::Script::\"+toolName+\" CUSTOMIZATION ERROR:\", errorMessage);\n              \n              // Show user notification\n              components.ui.showNotification(\n                `Invalid customization: ${cRequested.id} not available for ${item.name}`, \n                \"error\"\n              );\n              \n              return JSON.stringify({\n                success: false,\n                error: errorMessage,\n                itemName: item.name,\n                requestedCustomization: cRequested.id,\n                availableCustomizations: item.availableCustomizations.map(c => ({\n                  id: c.id,\n                  name: c.name,\n                  price: c.price,\n                  isRemoval: c.isRemoval || false\n                })),\n                suggestion: item.availableCustomizations.length > 0 \n                  ? `Please choose from: ${availableCustomizationNames}`\n                  : `${item.name} cannot be customized`\n              });\n            }\n            \n            // Valid customization - add it\n            customizations.push(foundCustomization);\n            console.log(\"Tool::Script::\"+toolName+\" valid customization added:\", foundCustomization.name);\n          }\n        }\n        \n        console.log(\"Tool::Script::\"+toolName+\" final validated customizations:\", customizations);\n        \n      } catch(e) {\n        console.error(\"Tool::Script::\"+toolName+\" customization validation error:\", e);\n        return JSON.stringify({\n          success: false,\n          error: `Error processing customizations for ${item.name}: ${e.message}`\n        });\n      }\n\n      // If the item becomes unavailable, we need to tell that to the agent\n      if (!item.available) {\n        return JSON.stringify({\n          success: false,\n          error: `Item id \"${element.itemId}\" is not available right now, it could be out of stock`\n        });\n      }\n\n      // Check if this item already exists in cart with same customizations\n      console.log(\"Tool::Script::\"+toolName+\" checking for existing cart item with menuItemId:\", item.id, \"and customizations:\", customizations);\n      const existingCartItem = findExistingCartItem(String(item.id), customizations);\n      \n      if (existingCartItem) {\n        // Item exists - update quantity instead of adding new\n        const newQuantity = existingCartItem.quantity + (element.quantity || 1);\n        console.log(\"Tool::Script::\"+toolName+\" found existing item:\", existingCartItem.name, \"current qty:\", existingCartItem.quantity, \"adding:\", element.quantity, \"new total:\", newQuantity);\n        \n        itemsToUpdate.push({\n          cartItemId: existingCartItem.id,\n          itemName: existingCartItem.name,\n          oldQuantity: existingCartItem.quantity,\n          addedQuantity: element.quantity || 1,\n          newQuantity: newQuantity\n        });\n        \n        // Use updateQuantity to merge\n        console.log(\"Tool::Script::\"+toolName+\" calling updateQuantity for existing item\");\n        const updateResult = components.cart.updateQuantity(existingCartItem.id, newQuantity);\n        cartResult = { summary: updateResult };\n        \n        // Show success notification for merge\n        components.ui.showNotification(\n          `Added ${element.quantity || 1}x ${item.name} to existing cart item (${newQuantity} total)`, \n          \"success\"\n        );\n        \n      } else {\n        // Item doesn't exist - add as new item\n        console.log(\"Tool::Script::\"+toolName+\" no existing item found, adding as new item\");\n        \n        item.menuItemId = String(item.id);\n        item.quantity = element.quantity || 1;\n        item.customizations = customizations; // Now guaranteed to be valid\n        itemsToAdd.push(item);\n        \n        // Show success notification for new item\n        const customizationText = customizations.length > 0 \n          ? ` with ${customizations.map(c => c.name).join(', ')}`\n          : '';\n        \n        components.ui.showNotification(\n          `Added ${item.quantity}x ${item.name}${customizationText} to cart`, \n          \"success\"\n        );\n      }\n      \n      // Highlight the item in the menu\n      components.menu.highlightItem(item.id, 3000);\n      \n      processedItems.push({\n        itemId: element.itemId,\n        itemName: item.name,\n        quantity: element.quantity || 1,\n        action: existingCartItem ? 'merged' : 'added',\n        customizations: customizations\n      });   \n    }\n\n    // Add new items to cart (if any) and capture combo information\n    if (itemsToAdd.length > 0) {\n      console.log(\"Tool::Script::\"+toolName+\" adding\", itemsToAdd.length, \"new items to cart\");\n      cartResult = components.cart.bulkAddToCart(itemsToAdd);\n      console.log(\"Tool::Script::\"+toolName+\" bulkAddToCart result:\", JSON.stringify(cartResult, null, 2));\n      \n      // Check if combo was applied\n      if (cartResult && cartResult.comboApplied) {\n        comboApplied = cartResult.comboApplied;\n        console.log(\"Tool::Script::\"+toolName+\" COMBO DETECTED:\", comboApplied.comboName, \"savings:\", comboApplied.savings);\n        \n        // Show combo notification\n        components.ui.showNotification(\n          `🎉 ${comboApplied.comboName} applied! Saved $${comboApplied.savings.toFixed(2)}`, \n          \"success\"\n        );\n      }\n    }\n\n    // Ensure cartResult is always set\n    if (!cartResult) {\n      cartResult = { summary: components.cart.getOrderSummary() };\n    }\n\n    console.log(\"Tool::Script::\"+toolName+\" final cart result:\", JSON.stringify(cartResult, null, 2));\n\n    // Sending cart item to the API for synchronization (Drive-thru logic with roomNumber)\n    const tokens = await auth.getTokens();\n    const payload = {\n      roomNumber: utils.storage.getData('guestRoomNumber'),\n      loyaltyId: input.loyaltyId || \"null\",\n      cartSummary: JSON.stringify(cartResult.summary).replace(/\"/g, '\\\\\"')\n    }\n    console.log(\"Tool::Script::\"+toolName+\" syncing with API:\", JSON.stringify(payload, null, 2));\n\n    // Fire-and-forget with error handling\n    if (tokens.idToken && globals.cartAPIURL) {\n      axios.post(globals.cartAPIURL, payload, {\n        headers: {\n          \"Authorization\": `${tokens.idToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(\"Tool::Script::\"+toolName+\" cart synced successfully:\", response.data);\n      }).catch(syncError => {\n        console.error(\"Tool::Script::\"+toolName+\" cart sync error:\", syncError);\n        console.error(\"Tool::Script::\"+toolName+\" error details:\", syncError.response?.data);\n        // Don't fail the whole operation if sync fails\n      });\n    } else {\n      console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL\");\n    }\n    \n    // Include combo information in the result\n    const result = JSON.stringify({\n      success: true,\n      processedItems: processedItems,\n      newItems: cartResult ? cartResult.addedItems : [],\n      updatedItems: itemsToUpdate,\n      cartSummary: cartResult.summary,\n      ...(comboApplied && { comboApplied })\n    }); \n    \n    console.log(\"Tool::Script::\"+toolName+\" executed with output:\", result);\n    \n    return result;\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    components.ui.showNotification(\"Failed to add item to cart\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 4
        },
        {
          "tool_name": "addCustomizationToCartItem",
          "description": "This tools will add customization to an item previously added to the cart using the cartItemId",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"cartItemId\": {\n      \"type\": \"string\",\n      \"description\": \"Optional: Specific cart item ID to modify\"\n    },\n    \"itemDescription\": {\n      \"type\": \"string\",\n      \"description\": \"Optional: Item description when customer doesn't specify exact item (e.g., 'fresh bed linens')\"\n    },\n    \"customizations\": {\n      \"type\": \"array\",\n      \"description\": \"Array of customization IDs to add\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"id\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"customizations\"\n  ],\n  \"oneOf\": [\n    {\n      \"required\": [\n        \"cartItemId\"\n      ]\n    },\n    {\n      \"required\": [\n        \"itemDescription\"\n      ]\n    }\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, toolName, components, auth, axios, globals, utils } = args;\n\n  console.log(\"Tool::Script::\"+toolName+\" executed input:\", input);\n  \n  try {\n    const cartItem = components.cart.getCartItem(input.cartItemId);\n    if (!cartItem) {\n      return JSON.stringify({\n        success: false,\n        error: \"Cart item not found\"\n      });\n    }\n    \n    console.log(\"Tool::Script::\"+toolName+\" cart item:\", cartItem);\n    \n    const menuItem = components.menu.getItemById(cartItem.menuItemId);\n    if (!menuItem) {\n      return JSON.stringify({\n        success: false,\n        error: \"Menu item not found\"\n      });\n    }\n    \n    console.log(\"Tool::Script::\"+toolName+\" item to update:\", menuItem);\n    \n    const customizationsToAdd = [];\n    const customizationsToReplace = []; // NEW: Track replacements\n    const alreadyExists = [];\n    const notAvailable = [];\n    \n    if (Array.isArray(input.customizations) && input.customizations.length > 0) {\n      for (const cRequested of input.customizations) {\n        // Find the customization in menu\n        const availableCustomization = menuItem.availableCustomizations.find(cAvailable => \n          cRequested.id === cAvailable.id\n        );\n        \n        if (!availableCustomization) {\n          notAvailable.push(cRequested.id);\n          continue;\n        }\n        \n        // Check if customization already exists on cart item\n        const existingCustomization = cartItem.customizations.find(existing => \n          existing.id === cRequested.id\n        );\n        \n        if (existingCustomization) {\n          alreadyExists.push(availableCustomization.name);\n          console.log(\"Tool::Script::\"+toolName+\" customization already exists:\", availableCustomization.name);\n          continue;\n        }\n        \n        // NEW: Check for mutually exclusive customizations\n        const conflictingCustomization = cartItem.customizations.find(existing => {\n          const existingId = existing.id.toLowerCase();\n          const newId = availableCustomization.id.toLowerCase();\n          \n          // Linen types are mutually exclusive\n          if ((existingId.includes('linen-') || existingId.includes('linens-')) && \n              (newId.includes('linen-') || newId.includes('linens-'))) {\n            return true;\n          }\n          \n          // Towel types are mutually exclusive  \n          if ((existingId.includes('towel-') || existingId.includes('towels-')) && \n              (newId.includes('towel-') || newId.includes('towels-'))) {\n            return true;\n          }\n          \n          return false;\n        });\n        \n        if (conflictingCustomization) {\n          // This is a replacement scenario\n          customizationsToReplace.push({\n            oldCustomization: conflictingCustomization,\n            newCustomization: availableCustomization\n          });\n          console.log(\"Tool::Script::\"+toolName+\" will replace:\", conflictingCustomization.name, \"with:\", availableCustomization.name);\n        } else {\n          // This is a new addition\n          customizationsToAdd.push(availableCustomization);\n          console.log(\"Tool::Script::\"+toolName+\" will add customization:\", availableCustomization.name);\n        }\n      }\n    }\n    \n    // Handle errors\n    if (notAvailable.length > 0) {\n      return JSON.stringify({\n        success: false,\n        error: `Customizations not available: ${notAvailable.join(', ')}`,\n        availableCustomizations: menuItem.availableCustomizations.map(c => ({\n          id: c.id,\n          name: c.name,\n          price: c.price\n        }))\n      });\n    }\n    \n    let item = cartItem;\n    const addedCustomizations = [];\n    const replacedCustomizations = []; // NEW: Track what was replaced\n    \n    // NEW: Handle replacements first\n    for (const replacement of customizationsToReplace) {\n      // Remove old customization\n      await components.cart.removeCustomizationFromCartItem(input.cartItemId, replacement.oldCustomization.id);\n      // Add new customization\n      item = await components.cart.addCustomizationToCartItem(input.cartItemId, replacement.newCustomization);\n      \n      replacedCustomizations.push({\n        old: replacement.oldCustomization.name,\n        new: replacement.newCustomization.name\n      });\n      console.log(\"Tool::Script::\"+toolName+\" replaced:\", replacement.oldCustomization.name, \"with:\", replacement.newCustomization.name);\n    }\n    \n    // Add only new customizations\n    for (const customization of customizationsToAdd) {\n      item = await components.cart.addCustomizationToCartItem(input.cartItemId, customization);\n      addedCustomizations.push(customization.name);\n      console.log(\"Tool::Script::\"+toolName+\" added customization:\", customization.name);\n    }\n    \n    // Show appropriate notifications\n    if (replacedCustomizations.length > 0) {\n      const replacementText = replacedCustomizations.map(r => `${r.old} → ${r.new}`).join(', ');\n      components.ui.showNotification(\n        `Updated ${cartItem.name}: ${replacementText}`,\n        \"success\"\n      );\n    }\n    \n    if (addedCustomizations.length > 0) {\n      components.ui.showNotification(\n        `Added ${addedCustomizations.join(', ')} to ${cartItem.name}`,\n        \"success\"\n      );\n    }\n    \n    if (alreadyExists.length > 0) {\n      components.ui.showNotification(\n        `${alreadyExists.join(', ')} already on ${cartItem.name}`,\n        \"info\"\n      );\n    }\n    \n    const orderSummary = components.cart.getOrderSummary();\n    \n    // Sending cart item to the API for synchronization\n    const tokens = await auth.getTokens();\n    const payload = {\n      roomNumber: utils.storage.getData('guestRoomNumber'),\n      loyaltyId: input.loyaltyId || \"null\",\n      cartSummary: JSON.stringify(orderSummary).replace(/\"/g, '\\\\\"')\n    }\n    console.log(\"Tool::Script::\"+toolName+\" syncing with API:\", JSON.stringify(payload, null, 2));\n\n    // Fire-and-forget with error handling\n    if (tokens.idToken && globals.cartAPIURL) {\n      axios.post(globals.cartAPIURL, payload, {\n        headers: {\n          \"Authorization\": `${tokens.idToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(\"Tool::Script::\"+toolName+\" cart synced successfully:\", response.data);\n      }).catch(syncError => {\n        console.error(\"Tool::Script::\"+toolName+\" cart sync error:\", syncError);\n        console.error(\"Tool::Script::\"+toolName+\" error details:\", syncError.response?.data);\n        // Don't fail the whole operation if sync fails\n      });\n    } else {\n      console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL\");\n    }\n    \n    return JSON.stringify({ \n      success: true,\n      result: \"success\",\n      message: [\n        ...replacedCustomizations.map(r => `Replaced ${r.old} with ${r.new}`),\n        ...addedCustomizations.map(c => `Added ${c}`),\n        ...alreadyExists.map(c => `${c} already existed`)\n      ].join('; ') || \"No changes made\",\n      addedCustomizations: addedCustomizations,\n      replacedCustomizations: replacedCustomizations,\n      alreadyExisted: alreadyExists,\n      itemModified: item,\n      cartSummary: orderSummary\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    components.ui.showNotification(\"Failed to add customization\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 5
        },
        {
          "tool_name": "RemoveItemFromCart",
          "description": "This tool will help you remove an item that was incorrectly added to the cart, you can also use it to modify and incorrect entry by removing and adding the item correctly typed",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Remove items from cart using either exact cart item IDs or natural language descriptions\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"description\": \"Array of items to remove using exact cart item IDs (existing format)\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"cartItemId\": {\n            \"type\": \"string\",\n            \"description\": \"Exact ID of the cart item to remove\"\n          },\n          \"quantity\": {\n            \"type\": \"number\",\n            \"description\": \"Quantity to remove\"\n          }\n        },\n        \"required\": [\"cartItemId\", \"quantity\"]\n      }\n    },\n    \"itemsToRemove\": {\n      \"type\": \"array\", \n      \"description\": \"Array of items to remove using natural language descriptions (smart format)\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"itemDescription\": {\n            \"type\": \"string\",\n            \"description\": \"Natural language description of item to remove (e.g., 'burger combo', 'the cheese burger', 'combo')\"\n          },\n          \"quantity\": {\n            \"type\": \"number\",\n            \"description\": \"Quantity to remove\",\n            \"default\": 1\n          }\n        },\n        \"required\": [\"itemDescription\"]\n      }\n    }\n  },\n  \"oneOf\": [\n    {\"required\": [\"items\"]},\n    {\"required\": [\"itemsToRemove\"]}\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName, utils, auth, axios, globals } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    // Check if using existing format (cartItemId)\n    if (input.items && Array.isArray(input.items) && input.items.length > 0 && input.items[0].cartItemId) {\n      console.log(\"Tool::Script::\" + toolName + \" using EXISTING format (cartItemId)\");\n      return await executeExistingLogic(input, components, toolName, auth, axios, globals, utils);\n    }\n    \n    // Check if using new smart format (itemDescription)\n    if (input.itemsToRemove && Array.isArray(input.itemsToRemove) && input.itemsToRemove.length > 0) {\n      console.log(\"Tool::Script::\" + toolName + \" using NEW smart format (itemDescription)\");\n      return await executeSmartLogic(input, components, toolName, auth, axios, globals, utils);\n    }\n    \n    throw new Error(\"Invalid input format. Use either 'items' with 'cartItemId' or 'itemsToRemove' with 'itemDescription'\");\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\" + toolName + \" error:\", error);\n    components.ui.showNotification(\"Failed to remove items from cart\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Existing logic (unchanged)\nasync function executeExistingLogic(input, components, toolName, auth, axios, globals, utils) {\n  console.log(\"Tool::Script::\" + toolName + \" EXISTING LOGIC: processing\", input.items.length, \"items\");\n  const processedItems = [];\n  \n  // Initialize cartResult at the top\n  let cartResult = null;\n  \n  for (const element of input.items) {\n    console.log(\"Tool::Script::\" + toolName + \" processing item:\", JSON.stringify(element, null, 2));\n    \n    const cartItem = components.cart.getCartItem(element.cartItemId);\n    console.log(\"Tool::Script::\" + toolName + \" getCartItem result:\", JSON.stringify(cartItem, null, 2));\n    \n    if (!cartItem) {\n      console.error(\"Tool::Script::\" + toolName + \" ERROR: Cart item with ID\", element.cartItemId, \"not found\");\n      components.ui.showNotification(`Cart item with ID \"${element.cartItemId}\" not found in cart`, \"error\");\n      continue;\n    }\n\n    const newQuantity = cartItem.quantity - element.quantity;\n    console.log(\"Tool::Script::\" + toolName + \" quantity calculation:\", cartItem.quantity, \"-\", element.quantity, \"=\", newQuantity);\n    \n    if (newQuantity < 0) {\n      console.error(\"Tool::Script::\" + toolName + \" ERROR: Cannot remove\", element.quantity, \"items. Only\", cartItem.quantity, \"available\");\n      components.ui.showNotification(`Cannot remove ${element.quantity} items. Only ${cartItem.quantity} available in cart`, \"error\");\n      continue;\n    }\n\n    console.log(\"Tool::Script::\" + toolName + \" calling components.cart.updateQuantity with cartItemId:\", element.cartItemId, \"newQuantity:\", newQuantity);\n    const updateResult = components.cart.updateQuantity(element.cartItemId, newQuantity);\n    cartResult = { summary: updateResult };\n    console.log(\"Tool::Script::\" + toolName + \" updateQuantity result:\", JSON.stringify(updateResult, null, 2));\n    \n    processedItems.push({\n      cartItemId: element.cartItemId,\n      itemName: cartItem.name,\n      removedQuantity: element.quantity,\n      newQuantity: newQuantity,\n      action: newQuantity === 0 ? 'removed' : 'updated'\n    });\n\n    if (newQuantity === 0) {\n      console.log(\"Tool::Script::\" + toolName + \" item completely removed\");\n      components.ui.showNotification(`Removed all ${cartItem.name} from cart`, \"success\");\n    } else {\n      console.log(\"Tool::Script::\" + toolName + \" item quantity updated\");\n      components.ui.showNotification(`Removed ${element.quantity}x ${cartItem.name} from cart (${newQuantity} remaining)`, \"success\");\n    }\n  }\n\n  const finalCartSummary = components.cart.getOrderSummary();\n  console.log(\"Tool::Script::\" + toolName + \" final cart summary:\", JSON.stringify(finalCartSummary, null, 2));\n\n  // Ensure cartResult is always set\n  if (!cartResult) {\n    cartResult = { summary: finalCartSummary };\n  }\n\n  // Sending cart item to the API for synchronization\n  const tokens = await auth.getTokens();\n  const payload = {\n    roomNumber: utils.storage.getData('guestRoomNumber'),\n    loyaltyId: input.loyaltyId || \"null\",\n    cartSummary: JSON.stringify(cartResult.summary).replace(/\"/g, '\\\\\"')\n  }\n  console.log(\"Tool::Script::\"+toolName+\" syncing with API:\", JSON.stringify(payload, null, 2));\n\n  // Fire-and-forget with error handling\n  if (tokens.idToken && globals.cartAPIURL) {\n    axios.post(globals.cartAPIURL, payload, {\n      headers: {\n        \"Authorization\": `${tokens.idToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log(\"Tool::Script::\"+toolName+\" cart synced successfully:\", response.data);\n    }).catch(syncError => {\n      console.error(\"Tool::Script::\"+toolName+\" cart sync error:\", syncError);\n      console.error(\"Tool::Script::\"+toolName+\" error details:\", syncError.response?.data);\n      // Don't fail the whole operation if sync fails\n    });\n  } else {\n    console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL\");\n  }\n\n  const success = processedItems.length > 0;\n  const result = JSON.stringify({\n    success: success,\n    processedItems: processedItems,\n    cartSummary: cartResult.summary\n  }); \n\n  console.log(\"Tool::Script::\" + toolName + \" EXISTING LOGIC executed with output:\", result);\n  return result;\n}\n\n// SIMPLIFIED Smart Logic - Focus on the core issue\nasync function executeSmartLogic(input, components, toolName, auth, axios, globals, utils) {\n  console.log(\"Tool::Script::\" + toolName + \" SMART LOGIC: processing\", input.itemsToRemove.length, \"item descriptions\");\n  \n  // Initialize cartResult at the top\n  let cartResult = null;\n  \n  const currentCart = components.cart.getOrderSummary();\n  console.log(\"Tool::Script::\" + toolName + \" current cart:\", JSON.stringify(currentCart, null, 2));\n  \n  if (!currentCart.items || currentCart.items.length === 0) {\n    components.ui.showNotification(\"Your cart is empty\", \"info\");\n    return JSON.stringify({\n      success: false,\n      error: \"Cart is empty\",\n      cartSummary: currentCart\n    });\n  }\n  \n  const processedItems = [];\n  const clarificationNeeded = [];\n  \n  for (const element of input.itemsToRemove) {\n    const itemDescription = element.itemDescription?.toLowerCase().trim();\n    const requestedQuantity = element.quantity || 1;\n    \n    if (!itemDescription) {\n      console.log(\"Tool::Script::\" + toolName + \" skipping empty item description\");\n      continue;\n    }\n    \n    console.log(\"Tool::Script::\" + toolName + \" looking for:\", itemDescription);\n    \n    // SIMPLE MATCHING LOGIC - Focus on the core issue\n    const matches = currentCart.items.filter(cartItem => {\n      const itemName = cartItem.name.toLowerCase();\n      console.log(\"Tool::Script::\" + toolName + \" checking:\", cartItem.name, \"against:\", itemDescription);\n      \n      // RULE 1: If customer mentions \"with [customization]\", only match items that have that customization\n      if (itemDescription.includes('with ')) {\n        // Extract what they want: \"milkshake with whipped cream\" -> \"whipped cream\"\n        const wantedCustomization = itemDescription.replace(/.*with\\s+/, '').trim();\n        \n        // Only match items that have customizations (~)\n        if (itemName.includes('~')) {\n          const itemCustomizations = itemName.split('~')[1];\n          // Clean up pricing and check if it contains what they want\n          const cleanCustomizations = itemCustomizations\n            .replace(/\\(\\+\\$[\\d.]+\\)/g, '')\n            .replace(/\\(\\-\\$[\\d.]+\\)/g, '')\n            .trim()\n            .toLowerCase();\n          \n          // Check if the customization matches\n          if (cleanCustomizations.includes(wantedCustomization)) {\n            console.log(\"Tool::Script::\" + toolName + \" CUSTOMIZATION match:\", cartItem.name);\n            return true;\n          }\n        }\n        // If they want customization but this item has none, don't match\n        return false;\n      }\n      \n      // RULE 2: If customer says just the base item name, match all variants\n      const baseItemName = itemName.split('~')[0].trim();\n      if (baseItemName.toLowerCase().includes(itemDescription) || itemDescription.includes(baseItemName.toLowerCase())) {\n        console.log(\"Tool::Script::\" + toolName + \" BASE match:\", cartItem.name);\n        return true;\n      }\n      \n      return false;\n    });\n    \n    console.log(\"Tool::Script::\" + toolName + \" found\", matches.length, \"matches for:\", itemDescription);\n    matches.forEach(match => console.log(\"Tool::Script::\" + toolName + \" - Match:\", match.name));\n    \n    if (matches.length === 0) {\n      const availableItems = currentCart.items.map(item => item.name).join(', ');\n      console.log(\"Tool::Script::\" + toolName + \" no matches found\");\n      \n      return JSON.stringify({\n        success: false,\n        error: `\"${element.itemDescription}\" not found in your cart`,\n        availableItems: currentCart.items.map(item => ({\n          id: item.id,\n          name: item.name,\n          quantity: item.quantity\n        })),\n        message: `I don't see \"${element.itemDescription}\" in your cart. Available items: ${availableItems}`,\n        cartSummary: currentCart\n      });\n      \n    } else if (matches.length === 1) {\n      // Single match - remove directly\n      const cartItem = matches[0];\n      console.log(\"Tool::Script::\" + toolName + \" single match found:\", cartItem.name);\n      \n      if (requestedQuantity > cartItem.quantity) {\n        components.ui.showNotification(`Cannot remove ${requestedQuantity}x ${cartItem.name}. Only ${cartItem.quantity} available`, \"error\");\n        continue;\n      }\n      \n      const newQuantity = cartItem.quantity - requestedQuantity;\n      console.log(\"Tool::Script::\" + toolName + \" removing\", requestedQuantity, \"from\", cartItem.quantity, \"=\", newQuantity);\n      \n      const updateResult = components.cart.updateQuantity(cartItem.id, newQuantity);\n      cartResult = { summary: updateResult };\n      console.log(\"Tool::Script::\" + toolName + \" updateQuantity result:\", JSON.stringify(updateResult, null, 2));\n      \n      processedItems.push({\n        cartItemId: cartItem.id,\n        itemName: cartItem.name,\n        removedQuantity: requestedQuantity,\n        newQuantity: newQuantity,\n        action: newQuantity === 0 ? 'removed' : 'updated'\n      });\n      \n      if (newQuantity === 0) {\n        components.ui.showNotification(`Removed all ${cartItem.name} from cart`, \"success\");\n      } else {\n        components.ui.showNotification(`Removed ${requestedQuantity}x ${cartItem.name} from cart (${newQuantity} remaining)`, \"success\");\n      }\n      \n    } else {\n      // Multiple matches - need clarification\n      console.log(\"Tool::Script::\" + toolName + \" multiple matches found, need clarification\");\n      \n      clarificationNeeded.push({\n        requestedItem: element.itemDescription,\n        matches: matches.map(item => ({\n          id: item.id,\n          name: item.name,\n          quantity: item.quantity,\n          price: item.totalPrice\n        }))\n      });\n    }\n  }\n  \n  // Handle clarification - Simple and clear\n  if (clarificationNeeded.length > 0) {\n    const clarificationItem = clarificationNeeded[0];\n    \n    // Create clear descriptions - SIMPLE approach\n    const matchNames = clarificationItem.matches.map((match, index) => {\n      // Simple description with quantity for clarity\n      const hasCustomizations = match.name.includes('~') || match.name.includes('with') || match.name.includes('+');\n      \n      if (hasCustomizations) {\n        return `${match.name} (${match.quantity} qty)`;\n      } else {\n        return `${match.name} (${match.quantity} qty, regular)`;\n      }\n    }).join(' or ');\n    \n    return JSON.stringify({\n      success: false,\n      requiresClarification: true,\n      requestedItem: clarificationItem.requestedItem,\n      matches: clarificationItem.matches,\n      message: `I found ${clarificationItem.matches.length} items matching \"${clarificationItem.requestedItem}\": ${matchNames}. Which one would you like me to remove?`,\n      cartSummary: currentCart\n    });\n  }\n  \n  const finalCartSummary = components.cart.getOrderSummary();\n  console.log(\"Tool::Script::\" + toolName + \" final cart summary:\", JSON.stringify(finalCartSummary, null, 2));\n  \n  // Ensure cartResult is always set\n  if (!cartResult) {\n    cartResult = { summary: finalCartSummary };\n  }\n  \n  // Sending cart item to the API for synchronization\n  const tokens = await auth.getTokens();\n  const payload = {\n    roomNumber: utils.storage.getData('guestRoomNumber'),\n    loyaltyId: input.loyaltyId || \"null\",\n    cartSummary: JSON.stringify(cartResult.summary).replace(/\"/g, '\\\\\"')\n  }\n  console.log(\"Tool::Script::\"+toolName+\" syncing with API:\", JSON.stringify(payload, null, 2));\n\n  // Fire-and-forget with error handling\n  if (tokens.idToken && globals.cartAPIURL) {\n    axios.post(globals.cartAPIURL, payload, {\n      headers: {\n        \"Authorization\": `${tokens.idToken}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      console.log(\"Tool::Script::\"+toolName+\" cart synced successfully:\", response.data);\n    }).catch(syncError => {\n      console.error(\"Tool::Script::\"+toolName+\" cart sync error:\", syncError);\n      console.error(\"Tool::Script::\"+toolName+\" error details:\", syncError.response?.data);\n      // Don't fail the whole operation if sync fails\n    });\n  } else {\n    console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL\");\n  }\n  \n  const result = JSON.stringify({\n    success: true,\n    processedItems: processedItems,\n    cartSummary: cartResult.summary,\n    method: \"smart_matching\"\n  });\n  \n  console.log(\"Tool::Script::\" + toolName + \" SMART LOGIC executed with output:\", result);\n  return result;\n}",
          "run_after_app_init": false,
          "order": 6
        },
        {
          "tool_name": "GetCurrentCartItems",
          "description": "The the current cart items and total",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { toolName, components } = args;\n  const orderSummary = components.cart.getOrderSummary();\n  console.log(\"Tool::Script::\"+toolName+\" current cart:\", orderSummary);\n  // Always return a JSON string\n  return JSON.stringify({ \n    result: \"success\",\n    currentCartItems: orderSummary\n  });\n}",
          "run_after_app_init": false,
          "order": 7
        },
        {
          "tool_name": "ShowCategoryItems",
          "description": "This tool will allow you to keep the conversation in context with what the customer is watching on the screen. Throughout the conversation, you can call this tool to highlight the category you want to bring focus or as an up selling strategy",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"Category to show (e.g., Breakfast, Lunch, Dinner, beverages Spa, Housekeeping, Amenities)\"\n    }\n  },\n  \"required\": [\n    \"category\"\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with input:\", input);\n  try {\n    const categories = components.menu.getAllCategories();\n    console.log(\"Tool::Script::\"+toolName+\" All Categories:\", categories);\n    \n    // Find category by name or ID (case insensitive)\n    const targetCategory = categories.find(cat => \n      cat.id.toLowerCase() === input.category.toLowerCase() || \n      cat.name.toLowerCase() === input.category.toLowerCase() ||\n      cat.displayName.toLowerCase() === input.category.toLowerCase()\n    );\n    \n    if (!targetCategory) {\n      const availableCategories = categories.map(cat => cat.displayName).join(', ');\n      components.ui.showNotification(\n        `Category \"${input.category}\" not found. Available: ${availableCategories}`, \n        \"warning\"\n      );\n      const result = JSON.stringify({\n        success: false,\n        error: `Category '${input.category}' not found`,\n        availableCategories: categories.map(cat => cat.displayName)\n      });\n      //console.log(\"Tool::Script::\"+toolName+\" executed with output:\", result);\n      return result;\n    }\n    \n    // Set the active category (same as clicking the category button)\n    components.menu.showCategory(targetCategory.id)\n    components.menu.setActiveCategory(targetCategory.id);\n    \n    // Get items in this category\n    const items = components.menu.getMenuItems(targetCategory.id);\n    //console.log(\"Tool::Script::\"+toolName+\" items:\", JSON.stringify(items,null,2));\n\n    const result = JSON.stringify({\n      success: true,\n      category: targetCategory.displayName,\n      itemCount: items.length,\n      items: items\n    });\n    console.log(\"Tool::Script::\"+toolName+\" executed with output:\", result);\n    return result;\n    \n  } catch (error) {\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 8
        },
        {
          "tool_name": "GetCategoryList",
          "description": "This tool will allow you to get the list of available categories to avoid errors during the selection of them in another tool. Get this list to keep your conversation in context",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName} = args;\n  const categories = components.menu.getAllCategories();\n  \n  // Always return a JSON string\n  return JSON.stringify({ \n    result: \"success\",\n    categories: categories\n  });\n}",
          "run_after_app_init": false,
          "order": 9
        },
        {
          "tool_name": "SubmitOrder",
          "description": "This tool will be that last one to use when the customer is ready to move for payment. By using this tool, you will be cleaning the chat and cart and leaving the interface ready for the next customer",
          "inputSchema": {
            "json": "{\n  \"tool_name\": \"SubmitOrder\",\n  \"description\": \"Submit the current order to the kitchen and save chat history to database\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n  },\n  \"run_after_app_init\": false,\n  \"order\": 20\n}"
          },
          "script": "async function execute({...args}) {\n  const { toolName, components, axios, auth, globals, utils } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with args:\", args);\n  \n  try {\n    // Get order summary and chat messages\n    const orderSummary = components.cart.getOrderSummary();\n    const chatMessages = components.chat.getMessagesForStorage();\n    \n    console.log(\"Tool::Script::\" + toolName + \" orderSummary\", orderSummary);\n    console.log(\"Tool::Script::\" + toolName + \" chatMessages\", chatMessages);\n    \n    // Check if room number is stored in session\n    const storedRoomNumber = utils.storage.getData('guestRoomNumber');\n    if (!storedRoomNumber) {\n      components.ui.showNotification(\"Room number required\", \"warning\");\n      return JSON.stringify({\n        success: false,\n        error: \"Room number required\",\n        message: \"Please provide your room number first.\"\n      });\n    }\n    \n    // Get authentication tokens\n    const tokens = await auth.getTokens();\n    if (!tokens.idToken) {\n      throw new Error(\"No access token available\");\n    }\n\n    console.log(\"Tool::Script::\"+ toolName +\" idToken:\", tokens.idToken);\n    \n    // Simple housekeeping detection by name\n    const housekeepingKeywords = ['towel', 'linen', 'cleaning', 'housekeeping', 'laundry', 'pressing'];\n    const housekeepingItems = orderSummary.items.filter(item => {\n      const itemName = (item.name || '').toLowerCase();\n      return housekeepingKeywords.some(keyword => itemName.includes(keyword));\n    });\n    const nonHousekeepingItems = orderSummary.items.filter(item => {\n      const itemName = (item.name || '').toLowerCase();\n      return !housekeepingKeywords.some(keyword => itemName.includes(keyword));\n    });\n    \n    console.log(\"Tool::Script::\" + toolName + \" housekeeping items:\", housekeepingItems.length);\n    console.log(\"Tool::Script::\" + toolName + \" non-housekeeping items:\", nonHousekeepingItems.length);\n    \n    let orderId = null;\n    \n    // Step 1: Submit non-housekeeping items to Order Table (if any)\n    if (nonHousekeepingItems.length > 0) {\n      const orderData = {\n        customerId: \"hotel-guest\",\n        total: orderSummary.total,\n        items: JSON.stringify(nonHousekeepingItems).replace(/\"/g, '\\\\\"'),\n        roomNumber: storedRoomNumber\n      };\n      \n      console.log(\"Tool::Script::\" + toolName + \" sending order data:\", orderData);\n      \n      const orderResponse = await axios.post(\n        globals.orderAPIURL,\n        orderData,\n        {\n          headers: {\n            \"Authorization\": `${tokens.idToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      );\n      \n      console.log(\"Tool::Script::\" + toolName + \" order API response:\", orderResponse.data);\n      orderId = orderResponse.data.orderId;\n    } else {\n      // Generate orderId for housekeeping-only requests\n      orderId = `HK-${Date.now()}`;\n    }\n    \n    // Step 2: Submit housekeeping items to Housekeeping Table (if any)\n    let housekeepingSubmitted = 0;\n    if (housekeepingItems.length > 0) {\n      console.log(\"Tool::Script::\" + toolName + \" submitting housekeeping items\");\n      \n      try {\n        const housekeepingData = {\n          requestId: orderId,\n          serviceType: \"housekeeping\",\n          serviceName: housekeepingItems.map(item => item.name).join(\", \"),\n          roomNumber: storedRoomNumber,\n          quantity: housekeepingItems.reduce((sum, item) => sum + (item.quantity || 1), 0),\n          urgency: \"standard\",\n          priority: \"normal\",\n          estimatedTime: \"30 minutes\",\n          preferredTime: \"ASAP\",\n          specialInstructions: housekeepingItems\n            .map(item => {\n              let instructions = \"\";\n              \n              // Handle different customization formats\n              if (item.customizations) {\n                if (Array.isArray(item.customizations)) {\n                  instructions = item.customizations.map(c => c.name || c).join(\", \");\n                } else if (typeof item.customizations === 'string') {\n                  instructions = item.customizations;\n                } else if (typeof item.customizations === 'object') {\n                  instructions = JSON.stringify(item.customizations);\n                }\n              } else if (item.specialInstructions) {\n                instructions = item.specialInstructions;\n              }\n              \n              return instructions ? `${item.name} - ${instructions}` : \"\";\n            })\n            .filter(instruction => instruction)\n            .join(\", \"),\n          requestTime: new Date().toISOString(),\n          status: \"pending\"\n        };\n        \n        await axios.post(\n          globals.housekeepingAPIURL,\n          housekeepingData,\n          {\n            headers: {\n              \"Authorization\": `${tokens.idToken}`,\n              \"Content-Type\": \"application/json\"\n            }\n          }\n        );\n        \n        housekeepingSubmitted = housekeepingItems.length;\n      } catch (housekeepingError) {\n        console.error(\"Tool::Script::\" + toolName + \" housekeeping error:\", housekeepingError);\n      }\n    }\n    \n    // Step 3: Save all chat messages in one batch request\n    if (chatMessages.length > 0) {\n      console.log(\"Tool::Script::\" + toolName + \" saving chat history batch for orderId:\", orderId);\n      \n      const messagesForBatch = chatMessages.map(message => ({\n        orderId: orderId,\n        timestamp: message.createdAt,\n        role: message.role,\n        message: message.message,\n        messageId: message.messageId\n      }));\n      \n      const chatBatchData = {\n        messages: messagesForBatch\n      };\n      \n      console.log(\"Tool::Script::\" + toolName + \" sending chat batch data:\", chatBatchData);\n      \n      const chatResponse = await axios.post(\n        globals.chatAPIURL,\n        chatBatchData,\n        {\n          headers: {\n            \"Authorization\": `${tokens.idToken}`,\n            \"Content-Type\": \"application/json\"\n          }\n        }\n      );\n      \n      console.log(\"Tool::Script::\" + toolName + \" chat batch API response:\", chatResponse.data);\n    }\n    \n    // Step 4: Clear cart and show success\n    components.cart.clearCart();\n    \n    // Step 5: Sync empty cart to DynamoDB\n    const emptyCartSummary = {\n      subtotal: 0,\n      tax: 0,\n      total: 0,\n      items: [],\n      totalQuantity: 0\n    };\n    const cartResult = { summary: emptyCartSummary };\n    const payload = {\n      roomNumber: storedRoomNumber,\n      loyaltyId: \"null\",\n      cartSummary: JSON.stringify(cartResult.summary).replace(/\"/g, '\\\\\"')\n    }\n    console.log(\"Tool::Script::\"+toolName+\" syncing empty cart with API:\", JSON.stringify(payload, null, 2));\n\n    // Fire-and-forget sync to clear backend cart\n    if (tokens.idToken && globals.cartAPIURL) {\n      axios.post(globals.cartAPIURL, payload, {\n        headers: {\n          \"Authorization\": `${tokens.idToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(\"Tool::Script::\"+toolName+\" empty cart synced successfully:\", response.data);\n      }).catch(syncError => {\n        console.error(\"Tool::Script::\"+toolName+\" cart clear sync error:\", syncError);\n        // Don't fail the whole operation if sync fails\n      });\n    } else {\n      console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL for cart clear sync\");\n    }\n    \n    // Create appropriate success message\n    let successMessage = \"\";\n    let confirmationMessage = \"\";\n    \n    if (nonHousekeepingItems.length > 0 && housekeepingItems.length > 0) {\n      successMessage = `Order submitted! Food sent to kitchen, ${housekeepingSubmitted} housekeeping requests sent to staff.`;\n      confirmationMessage = `Order #${orderId} - Food: $${orderSummary.total.toFixed(2)}, Housekeeping: ${housekeepingSubmitted} requests`;\n    } else if (nonHousekeepingItems.length > 0) {\n      successMessage = \"Order submitted successfully! Your food and drinks have been sent to the kitchen.\";\n      confirmationMessage = `Order #${orderId} has been sent to the kitchen. Total: $${orderSummary.total.toFixed(2)}`;\n    } else if (housekeepingItems.length > 0) {\n      successMessage = `Housekeeping requests submitted! ${housekeepingSubmitted} requests sent to staff.`;\n      confirmationMessage = `Request #${orderId} - ${housekeepingSubmitted} housekeeping services requested`;\n    }\n    \n    components.ui.showNotification(successMessage, \"success\");\n    components.chat.addMessage(confirmationMessage, \"system\");\n    \n    return JSON.stringify({\n      success: true,\n      result: \"success\",\n      message: successMessage,\n      orderId: orderId,\n      orderSummary: orderSummary,\n      housekeepingSubmitted: housekeepingSubmitted,\n      chatMessagesSaved: chatMessages.length\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\" + toolName + \" error:\", error);\n    \n    components.ui.showNotification(\n      \"Failed to submit order. Please try again.\",\n      \"error\"\n    );\n    \n    return JSON.stringify({\n      success: false,\n      error: error.message,\n      message: \"Failed to submit order. Please try again.\"\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 10
        },
        {
          "tool_name": "FinalizeSessionForNextCustomer",
          "description": "This tool will help you to clean the screen and leave it ready for the next customer. It should be used only after the order has been submitted. ",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName, utils } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with args:\", args);\n  const endSessionMessage = \"Thank you for your order! Your request will be processed shortly\"\n  const startSessionMessage = \"Welcome, connecting with cachier...\"\n  components.app.stopUI(true, endSessionMessage, 10, () => {\n    components.app.startUI(startSessionMessage, false);\n  });\n  return JSON.stringify({ \n    result: \"success\",\n    message: \"Tool executed successfully\",\n    instructionsForCachierAgent: `You can now tell the customer: ${endSessionMessage}`\n  });\n}",
          "run_after_app_init": false,
          "order": 11
        },
        {
          "tool_name": "MenuValidation",
          "description": "This Tool validates if a requested item exists in the menu and returns the exact menu ID or suggests alternatives. Use this tool BEFORE calling AddToCart to ensure item availability.",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Validates menu item availability and returns exact menu ID or suggestions\",\n  \"properties\": {\n    \"requestedItem\": {\n      \"type\": \"string\",\n      \"description\": \"The item name or description that the customer requested (e.g., 'lemon milkshake', 'cheese burger', 'buffalo wings')\"\n    }\n  },\n  \"required\": [\n    \"requestedItem\"\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    if (!input.requestedItem || input.requestedItem.trim() === '') {\n      return JSON.stringify({\n        success: false,\n        error: \"No item specified for validation\"\n      });\n    }\n\n    const requestedItem = input.requestedItem.toLowerCase().trim();\n    console.log(\"Tool::Script::\"+toolName+\" validating item:\", requestedItem);\n\n    // Get all available menu categories\n    const allCategories = components.menu.getAllCategories();\n    let allMenuItems = [];\n    \n    // Collect all menu items from all categories\n    allCategories.forEach(category => {\n      const categoryItems = components.menu.getMenuItems(category.id);\n      if (categoryItems && categoryItems.length > 0) {\n        allMenuItems = allMenuItems.concat(categoryItems);\n      }\n    });\n    \n    // Remove duplicates based on item ID\n    allMenuItems = allMenuItems.filter((item, index, self) => \n      index === self.findIndex(i => i.id === item.id)\n    );\n    \n    console.log(\"Tool::Script::\"+toolName+\" searching among\", allMenuItems.length, \"menu items\");\n    \n    // 1. EXACT NAME MATCH (case insensitive)\n    const exactMatch = allMenuItems.find(item => \n      item.name.toLowerCase() === requestedItem\n    );\n    \n    if (exactMatch) {\n      console.log(\"Tool::Script::\"+toolName+\" EXACT MATCH found:\", exactMatch.name);\n      return JSON.stringify({\n        success: true,\n        matchType: \"exact\",\n        validatedItem: {\n          id: exactMatch.id,\n          name: exactMatch.name,\n          price: exactMatch.price,\n          category: exactMatch.category,\n          available: exactMatch.available\n        },\n        message: `Found exact match: ${exactMatch.name}`,\n        instruction: `Use itemId: \"${exactMatch.id}\" for AddToCart`\n      });\n    }\n    \n    // 2. PARTIAL MATCHES (contains search term or word matches)\n    const partialMatches = allMenuItems.filter(item => {\n      const itemName = item.name.toLowerCase();\n      \n      // Direct substring match\n      if (itemName.includes(requestedItem) || requestedItem.includes(itemName)) {\n        return true;\n      }\n      \n      // Word-by-word matching\n      const requestedWords = requestedItem.split(/[\\s_-]+/).filter(word => word.length > 2);\n      const itemWords = itemName.split(/[\\s_-]+/).filter(word => word.length > 2);\n      \n      // Check if any requested word matches any item word\n      return requestedWords.some(reqWord => \n        itemWords.some(itemWord => \n          itemWord.includes(reqWord) || reqWord.includes(itemWord)\n        )\n      );\n    });\n    \n    if (partialMatches.length > 0) {\n      console.log(\"Tool::Script::\"+toolName+\" PARTIAL MATCHES found:\", partialMatches.length);\n      \n      // Sort by relevance (prioritize items that start with search term, then by length)\n      partialMatches.sort((a, b) => {\n        const aName = a.name.toLowerCase();\n        const bName = b.name.toLowerCase();\n        \n        // Prioritize items that start with the search term\n        const aStarts = aName.startsWith(requestedItem);\n        const bStarts = bName.startsWith(requestedItem);\n        if (aStarts && !bStarts) return -1;\n        if (!aStarts && bStarts) return 1;\n        \n        // Then prioritize items that contain the search term early\n        const aIndex = aName.indexOf(requestedItem);\n        const bIndex = bName.indexOf(requestedItem);\n        if (aIndex !== -1 && bIndex !== -1) {\n          if (aIndex !== bIndex) return aIndex - bIndex;\n        }\n        \n        // Finally by length (shorter = more relevant)\n        return aName.length - bName.length;\n      });\n      \n      return JSON.stringify({\n        success: false,\n        matchType: \"partial\",\n        error: `\"${input.requestedItem}\" is not available in our menu`,\n        suggestions: partialMatches.slice(0, 3).map(item => ({\n          id: item.id,\n          name: item.name,\n          price: item.price\n        })),\n        message: `Did you mean: ${partialMatches.slice(0, 3).map(item => item.name).join(', ')}?`,\n        instruction: \"Please confirm which item you'd like, then use the exact itemId for AddToCart\"\n      });\n    }\n    \n    // 3. CATEGORY-BASED SUGGESTIONS (Dynamic - no hardcoding)\n    // Extract potential category hints from the requested item\n    const requestedWords = requestedItem.split(/[\\s_-]+/).filter(word => word.length > 2);\n    let categoryMatches = [];\n    \n    // Check if any word in the request matches any category name\n    allCategories.forEach(category => {\n      const categoryName = category.name.toLowerCase();\n      const categoryDisplayName = category.displayName.toLowerCase();\n      \n      const matchesCategory = requestedWords.some(word => \n        categoryName.includes(word) || \n        categoryDisplayName.includes(word) ||\n        word.includes(categoryName) ||\n        word.includes(categoryDisplayName)\n      );\n      \n      if (matchesCategory) {\n        const categoryItems = allMenuItems.filter(item => \n          item.category && item.category.some(cat => \n            cat.toLowerCase() === category.name.toLowerCase() ||\n            cat.toLowerCase() === category.displayName.toLowerCase()\n          )\n        );\n        \n        if (categoryItems.length > 0) {\n          categoryMatches = categoryMatches.concat(categoryItems);\n        }\n      }\n    });\n    \n    // Remove duplicates from category matches\n    categoryMatches = categoryMatches.filter((item, index, self) => \n      index === self.findIndex(i => i.id === item.id)\n    );\n    \n    if (categoryMatches.length > 0) {\n      console.log(\"Tool::Script::\"+toolName+\" CATEGORY MATCHES found:\", categoryMatches.length);\n      return JSON.stringify({\n        success: false,\n        matchType: \"category\",\n        error: `\"${input.requestedItem}\" is not available in our menu`,\n        suggestions: categoryMatches.slice(0, 5).map(item => ({\n          id: item.id,\n          name: item.name,\n          price: item.price\n        })),\n        message: `We don't have \"${input.requestedItem}\", but here are some options that might interest you: ${categoryMatches.slice(0, 3).map(item => item.name).join(', ')}`,\n        instruction: \"Please choose from these options, then use the exact itemId for AddToCart\"\n      });\n    }\n    \n    // 4. NO MATCHES FOUND\n    console.log(\"Tool::Script::\"+toolName+\" NO MATCHES found for:\", requestedItem);\n    return JSON.stringify({\n      success: false,\n      matchType: \"none\",\n      error: `\"${input.requestedItem}\" is not available in our menu`,\n      message: \"Please choose from our available menu items or ask me to show you our menu categories\",\n      instruction: \"Use GetMenuItems to see all available options, then use exact itemId for AddToCart\",\n      availableCategories: allCategories.map(cat => cat.displayName)\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: `Error validating menu item: ${error.message}`\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 12
        },
        {
          "tool_name": "ReplaceComboItem",
          "description": "Replace a specific item within an existing combo (e.g., replace cola with lemonade in burger combo)",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Replace a specific item within an existing combo with a different menu item\",\n  \"properties\": {\n    \"comboCartItemId\": {\n      \"type\": \"string\",\n      \"description\": \"Cart ID of the combo to modify\"\n    },\n    \"oldItemName\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the item to replace (e.g., 'cola', 'fries')\"\n    },\n    \"newItemId\": {\n      \"type\": \"string\",\n      \"description\": \"Menu ID of the replacement item\"\n    }\n  },\n  \"required\": [\n    \"comboCartItemId\",\n    \"oldItemName\",\n    \"newItemId\"\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName, utils } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    // Get the combo from cart\n    const comboItem = components.cart.getCartItem(input.comboCartItemId);\n    if (!comboItem) {\n      return JSON.stringify({\n        success: false,\n        error: \"Combo not found in cart\"\n      });\n    }\n    \n    // Get replacement item from menu\n    const newItem = components.menu.getItemById(input.newItemId);\n    if (!newItem) {\n      return JSON.stringify({\n        success: false,\n        error: \"Replacement item not found in menu\"\n      });\n    }\n    \n    // Use existing comboItems if available, otherwise get from menu\n    let currentComboItems;\n    if (comboItem.comboItems && comboItem.comboItems.length > 0) {\n      // Use existing modified combo items\n      currentComboItems = [...comboItem.comboItems];\n      console.log(\"Tool::Script::\" + toolName + \" using existing combo items:\", currentComboItems);\n    } else {\n      // Get original combo definition from menu\n      const comboMenuData = components.menu.getItemById(comboItem.menuItemId);\n      if (!comboMenuData || !comboMenuData.items) {\n        return JSON.stringify({\n          success: false,\n          error: \"Combo structure not found in menu\"\n        });\n      }\n      \n      // Create initial combo items from menu data\n      currentComboItems = comboMenuData.items.map(item => ({\n        id: item.id,\n        name: item.name,\n        price: item.price,\n        isReplacement: false\n      }));\n      console.log(\"Tool::Script::\" + toolName + \" created initial combo items from menu:\", currentComboItems);\n    }\n    \n    // Find the item to replace in current combo items\n    const itemToReplaceIndex = currentComboItems.findIndex(item => \n      item.name.toLowerCase().includes(input.oldItemName.toLowerCase()) ||\n      input.oldItemName.toLowerCase().includes(item.name.toLowerCase()) ||\n      (item.originalName && item.originalName.toLowerCase().includes(input.oldItemName.toLowerCase()))\n    );\n    \n    if (itemToReplaceIndex === -1) {\n      return JSON.stringify({\n        success: false,\n        error: `Item \"${input.oldItemName}\" not found in ${comboItem.name}`,\n        availableItems: currentComboItems.map(item => item.name)\n      });\n    }\n    \n    const itemToReplace = currentComboItems[itemToReplaceIndex];\n    console.log(\"Tool::Script::\" + toolName + \" found item to replace:\", itemToReplace);\n    \n    // Calculate price difference (use original price if this was already a replacement)\n    const originalPrice = itemToReplace.originalPrice || itemToReplace.price;\n    const priceDifference = newItem.price - originalPrice;\n    \n    // Replace the item in the combo items array\n    currentComboItems[itemToReplaceIndex] = {\n      id: newItem.id,\n      name: newItem.name,\n      price: newItem.price,\n      isReplacement: true,\n      originalName: itemToReplace.originalName || itemToReplace.name,\n      originalPrice: originalPrice,\n      priceDifference: priceDifference\n    };\n    \n    console.log(\"Tool::Script::\" + toolName + \" updated combo items:\", currentComboItems);\n    \n    // Calculate total price difference from all modifications\n    const totalPriceDifference = currentComboItems.reduce((sum, item) => {\n      return sum + (item.priceDifference || 0);\n    }, 0);\n    \n    // Get original combo base price (without previous modifications)\n    const comboMenuData = components.menu.getItemById(comboItem.menuItemId);\n    const originalComboPrice = comboMenuData ? comboMenuData.price : comboItem.basePrice;\n    const newComboPrice = originalComboPrice + totalPriceDifference;\n    \n    console.log(\"Tool::Script::\" + toolName + \" price calculation:\", {\n      originalComboPrice,\n      totalPriceDifference,\n      newComboPrice\n    });\n    \n    // Update the combo item\n    const updatedCombo = {\n      ...comboItem,\n      basePrice: newComboPrice,\n      totalPrice: newComboPrice * comboItem.quantity,\n      comboItems: currentComboItems\n    };\n    \n    // Update the cart item\n    components.cart.updateCartItem(input.comboCartItemId, updatedCombo);\n    \n    // Show notification\n    const priceChangeText = priceDifference > 0 ? ` (+$${priceDifference.toFixed(2)})` : \n                           priceDifference < 0 ? ` (-$${Math.abs(priceDifference).toFixed(2)})` : '';\n    \n    components.ui.showNotification(\n      `Replaced ${itemToReplace.originalName || itemToReplace.name} with ${newItem.name}${priceChangeText}`,\n      \"success\"\n    );\n    \n    // Get updated cart summary\n    const cartSummary = components.cart.getOrderSummary();\n    \n    return JSON.stringify({\n      success: true,\n      message: `Successfully replaced ${itemToReplace.originalName || itemToReplace.name} with ${newItem.name}`,\n      comboItems: currentComboItems,\n      priceDifference: priceDifference,\n      totalPriceDifference: totalPriceDifference,\n      cartSummary: cartSummary\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\" + toolName + \" error:\", error);\n    components.ui.showNotification(\"Failed to replace combo item\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 13
        },
        {
          "tool_name": "removeCustomizationFromCartItem",
          "description": "Remove specific customizations, add-ons, or extras from items already in the cart (like removing cheese, changing bread type, removing toppings). Use this tool when customers want to modify existing items by removing only part of the customization, not the entire item. For removing entire items from cart, use RemoveItemFromCart instead.",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"description\": \"Remove specific customizations from cart items using natural language description\",\n  \"properties\": {\n    \"customizationDescription\": {\n      \"type\": \"string\",\n      \"description\": \"Natural language description of customization to remove (e.g., 'extra cheese', 'no onions', 'whipped cream')\"\n    },\n    \"cartItemId\": {\n      \"type\": \"string\",\n      \"description\": \"Optional: specific cart item ID if customer specifies which item to modify\"\n    },\n    \"removeFromAllQuantities\": {\n      \"type\": \"boolean\",\n      \"description\": \"Optional: if item has quantity > 1, whether to remove customization from all quantities (true) or ask for clarification (false)\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"customizationDescription\"\n  ]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName, auth, axios, globals, utils } = args;\n  console.log(\"Tool::Script::\" + toolName + \" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    // Get current cart\n    const currentCart = components.cart.getOrderSummary();\n    \n    if (!currentCart.items || currentCart.items.length === 0) {\n      components.ui.showNotification(\"Your cart is empty\", \"info\");\n      return JSON.stringify({\n        success: false,\n        error: \"Cart is empty\",\n        cartSummary: currentCart\n      });\n    }\n    \n    const customizationDescription = input.customizationDescription.toLowerCase().trim();\n    console.log(\"Tool::Script::\" + toolName + \" looking for customization:\", customizationDescription);\n    \n    // Find items with matching customizations\n    const matchingItems = [];\n    \n    for (const cartItem of currentCart.items) {\n      if (cartItem.customizations && cartItem.customizations.length > 0) {\n        // Find matching customizations in this item\n        const matchingCustomizations = cartItem.customizations.filter(custom => {\n          const customName = custom.name.toLowerCase();\n          // Match by exact name or partial match\n          return customName.includes(customizationDescription) || \n                 customizationDescription.includes(customName);\n        });\n        \n        if (matchingCustomizations.length > 0) {\n          matchingItems.push({\n            cartItem: cartItem,\n            matchingCustomizations: matchingCustomizations\n          });\n        }\n      }\n    }\n    \n    console.log(\"Tool::Script::\" + toolName + \" found\", matchingItems.length, \"items with matching customizations\");\n    \n    // Handle different scenarios\n    if (matchingItems.length === 0) {\n      // Scenario 3: No items found with the customization\n      const availableCustomizations = currentCart.items\n        .flatMap(item => item.customizations || [])\n        .map(custom => custom.name)\n        .filter((name, index, arr) => arr.indexOf(name) === index); // Remove duplicates\n      \n      components.ui.showNotification(`Customization \"${input.customizationDescription}\" not found in cart`, \"warning\");\n      \n      return JSON.stringify({\n        success: false,\n        error: `\"${input.customizationDescription}\" customization not found in your cart`,\n        availableCustomizations: availableCustomizations,\n        message: availableCustomizations.length > 0 \n          ? `Available customizations to remove: ${availableCustomizations.join(', ')}`\n          : \"No customizations found in your cart\",\n        cartSummary: currentCart\n      });\n    }\n    \n    // If specific cartItemId provided, filter to that item only\n    if (input.cartItemId) {\n      const specificItem = matchingItems.find(match => match.cartItem.id === input.cartItemId);\n      if (!specificItem) {\n        return JSON.stringify({\n          success: false,\n          error: `Customization \"${input.customizationDescription}\" not found in specified cart item`,\n          cartSummary: currentCart\n        });\n      }\n      matchingItems.length = 0;\n      matchingItems.push(specificItem);\n    }\n    \n    if (matchingItems.length > 1) {\n      // Scenario 4: Multiple items found - ask for clarification\n      components.ui.showNotification(\"Multiple items found with that customization\", \"info\");\n      \n      return JSON.stringify({\n        success: false,\n        requiresClarification: true,\n        error: `Found \"${input.customizationDescription}\" in multiple items`,\n        matchingItems: matchingItems.map(match => ({\n          cartItemId: match.cartItem.id,\n          itemName: match.cartItem.name,\n          quantity: match.cartItem.quantity,\n          customizations: match.matchingCustomizations.map(c => c.name)\n        })),\n        message: `I found \"${input.customizationDescription}\" in ${matchingItems.length} items: ${matchingItems.map(m => m.cartItem.name).join(', ')}. Which item would you like me to remove it from?`,\n        cartSummary: currentCart\n      });\n    }\n    \n    // Single item found - proceed with removal\n    const targetMatch = matchingItems[0];\n    const cartItem = targetMatch.cartItem;\n    const customizationsToRemove = targetMatch.matchingCustomizations;\n    \n    console.log(\"Tool::Script::\" + toolName + \" removing from item:\", cartItem.name);\n    console.log(\"Tool::Script::\" + toolName + \" customizations to remove:\", customizationsToRemove);\n    \n    // Handle quantity > 1 scenario\n    if (cartItem.quantity > 1 && !input.removeFromAllQuantities) {\n      components.ui.showNotification(\"Item has multiple quantities\", \"info\");\n      \n      return JSON.stringify({\n        success: false,\n        requiresQuantityDecision: true,\n        cartItem: {\n          id: cartItem.id,\n          name: cartItem.name,\n          quantity: cartItem.quantity\n        },\n        customizationsToRemove: customizationsToRemove.map(c => c.name),\n        message: `You have ${cartItem.quantity}x ${cartItem.name}. Do you want to remove \"${input.customizationDescription}\" from all ${cartItem.quantity} items, or just some of them?`,\n        options: [\n          \"Remove from all quantities\",\n          \"Remove from specific quantity (will split into separate items)\"\n        ],\n        cartSummary: currentCart\n      });\n    }\n    \n    // Remove each matching customization\n    const removedCustomizations = [];\n    for (const customization of customizationsToRemove) {\n      console.log(\"Tool::Script::\" + toolName + \" removing customization:\", customization.name, \"from item:\", cartItem.id);\n      \n      // Use the exposed removeCustomizationFromCartItem function\n      components.cart.removeCustomizationFromCartItem(cartItem.id, customization.id);\n      removedCustomizations.push(customization.name);\n    }\n    \n    // Show success notification\n    const customizationText = removedCustomizations.join(', ');\n    components.ui.showNotification(\n      `Removed ${customizationText} from ${cartItem.name}`,\n      \"success\"\n    );\n    \n    // Get updated cart summary\n    const finalCartSummary = components.cart.getOrderSummary();\n    \n    // Sending cart item to the API for synchronization\n    const tokens = await auth.getTokens();\n    const payload = {\n      roomNumber: utils.storage.getData('guestRoomNumber'),\n      loyaltyId: input.loyaltyId || \"null\",\n      cartSummary: JSON.stringify(finalCartSummary).replace(/\"/g, '\\\\\"')\n    }\n    console.log(\"Tool::Script::\"+toolName+\" syncing with API:\", JSON.stringify(payload, null, 2));\n\n    // Fire-and-forget with error handling\n    if (tokens.idToken && globals.cartAPIURL) {\n      axios.post(globals.cartAPIURL, payload, {\n        headers: {\n          \"Authorization\": `${tokens.idToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(\"Tool::Script::\"+toolName+\" cart synced successfully:\", response.data);\n      }).catch(syncError => {\n        console.error(\"Tool::Script::\"+toolName+\" cart sync error:\", syncError);\n        console.error(\"Tool::Script::\"+toolName+\" error details:\", syncError.response?.data);\n        // Don't fail the whole operation if sync fails\n      });\n    } else {\n      console.log(\"Tool::Script::\"+toolName+\" missing tokens or cartAPIURL\");\n    }\n    \n    return JSON.stringify({\n      success: true,\n      message: `Successfully removed ${customizationText} from ${cartItem.name}`,\n      removedCustomizations: removedCustomizations,\n      fromItem: {\n        id: cartItem.id,\n        name: cartItem.name,\n        quantity: cartItem.quantity\n      },\n      cartSummary: finalCartSummary\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\" + toolName + \" error:\", error);\n    components.ui.showNotification(\"Failed to remove customization\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 14
        }
      ],
      "globalParameters": [
        {
          "id": "param_1753890888050_menuapi",
          "key": "menuAPIURL",
          "value": "/menu",
          "description": "API endpoint for menu items",
          "order": 1
        },
        {
          "id": "param_1753891522025_cartapi",
          "key": "cartAPIURL",
          "value": "/cart",
          "description": "API endpoint for cart operations",
          "order": 2
        },
        {
          "id": "param_1753891782635_orderapi",
          "key": "orderAPIURL",
          "value": "/order",
          "description": "API endpoint for order submission",
          "order": 3
        },
        {
          "id": "param_1753891819063_loyaltyapi",
          "key": "loyaltyAPIURL",
          "value": "/loyalty",
          "description": "API endpoint for loyalty information",
          "order": 4
        },
        {
          "id": "param_1755756463752_roombookingapi",
          "key": "roomBookingAPIURL",
          "value": "/room-booking",
          "description": "API endpoint for room booking information",
          "order": 5
        },
        {
          "id": "param_1755875598550_7647r119i",
          "key": "chatAPIURL",
          "value": "/chat",
          "description": "",
          "order": 6
        },
        {
          "id": "param_1757139457386_vsa11kuux",
          "key": "housekeepingAPIURL",
          "value": "/housekeeping",
          "description": "API endpoint for room housekeeping order request",
          "order": 7
        }
      ],
      "companyName": "AI Room Service",
      "autoInitiateConversation": true,
      "initiationAudio": "data:audio/webm;base64,"
    }
  }
}