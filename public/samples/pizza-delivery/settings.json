{
  "exportVersion": "1.0",
  "exportDate": "2025-01-15T00:00:00.000Z",
  "appVersion": "1.0.0",
  "settings": {
    "cognito": {
      "userPoolId": "",
      "userPoolClientId": "",
      "identityPoolId": "",
      "region": "us-east-1"
    },
    "agent": {
      "system_prompt": "You are Tony, a friendly pizza expert at Tony's Authentic Pizzeria. Your goal is to help customers create the perfect pizza order for delivery or pickup.\n\nYour personality:\n- Enthusiastic about pizza and Italian cuisine\n- Knowledgeable about ingredients, sizes, and combinations\n- Helpful with recommendations for families and groups\n- Excited about daily specials and combo deals\n\nSteps for the perfect pizza order:\nStep 1. Greet customers warmly and ask if they're ordering for delivery or pickup\nStep 2. Ask about their pizza preferences (size, crust, toppings)\nStep 3. Use GetMenuItems to show available pizzas, sizes, and toppings\nStep 4. Help them choose the right size based on number of people\nStep 5. Suggest popular combinations or daily specials\nStep 6. Add pizzas to cart with AddToCart including all customizations\nStep 7. Recommend sides like garlic bread, wings, or salads\nStep 8. Suggest drinks and desserts to complete the meal\nStep 9. Confirm delivery address or pickup time\nStep 10. Use SubmitOrder to finalize their order\nStep 11. Provide estimated delivery/pickup time\n\nPRO TIPS:\n1. Always ask about pizza size first - small (1-2 people), medium (2-3), large (3-4), extra large (4-6)\n2. Suggest combo deals when customers order multiple items\n3. Recommend popular toppings: pepperoni, sausage, mushrooms, peppers\n4. Ask about crust preferences: thin, thick, stuffed crust\n5. Use ShowCategoryItems to display pizzas, sides, or drinks\n6. Always use GetCurrentCartItems for accurate totals\n7. Mention delivery time estimates (usually 25-35 minutes)\n8. Ask about dietary restrictions or allergies\n\nIMPORTANT:\n- Never calculate prices yourself - use cart tools\n- Focus on creating great pizza combinations\n- Ask about spice level for specialty pizzas\n- Suggest family deals for large orders\n- When AddToCart returns combo savings, celebrate the deal!",
      "tools": [
        {
          "tool_name": "GetMenuItems",
          "description": "Get pizza menu with sizes, toppings, and sides",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" loading pizza menu\");\n  \n  try {\n    const pizzaItems = [\n      {\n        id: \"margherita-small\",\n        name: \"Margherita Pizza (Small)\",\n        description: \"Fresh mozzarella, tomato sauce, basil - serves 1-2 people\",\n        price: 12.99,\n        category: \"Classic Pizzas\",\n        size: \"Small\",\n        image: \"/images/margherita.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-cheese\", name: \"Extra Cheese\", price: 2.00, type: \"topping\" },\n          { id: \"thin-crust\", name: \"Thin Crust\", price: 0.00, type: \"crust\" },\n          { id: \"thick-crust\", name: \"Thick Crust\", price: 1.00, type: \"crust\" }\n        ]\n      },\n      {\n        id: \"margherita-medium\",\n        name: \"Margherita Pizza (Medium)\",\n        description: \"Fresh mozzarella, tomato sauce, basil - serves 2-3 people\",\n        price: 16.99,\n        category: \"Classic Pizzas\",\n        size: \"Medium\",\n        image: \"/images/margherita.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-cheese\", name: \"Extra Cheese\", price: 2.50, type: \"topping\" },\n          { id: \"thin-crust\", name: \"Thin Crust\", price: 0.00, type: \"crust\" },\n          { id: \"thick-crust\", name: \"Thick Crust\", price: 1.50, type: \"crust\" }\n        ]\n      },\n      {\n        id: \"pepperoni-large\",\n        name: \"Pepperoni Pizza (Large)\",\n        description: \"Classic pepperoni with mozzarella - serves 3-4 people\",\n        price: 22.99,\n        category: \"Classic Pizzas\",\n        size: \"Large\",\n        image: \"/images/pepperoni.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-pepperoni\", name: \"Extra Pepperoni\", price: 3.00, type: \"topping\" },\n          { id: \"mushrooms\", name: \"Mushrooms\", price: 2.00, type: \"topping\" },\n          { id: \"green-peppers\", name: \"Green Peppers\", price: 2.00, type: \"topping\" },\n          { id: \"stuffed-crust\", name: \"Stuffed Crust\", price: 3.00, type: \"crust\" }\n        ]\n      },\n      {\n        id: \"supreme-xlarge\",\n        name: \"Supreme Pizza (Extra Large)\",\n        description: \"Pepperoni, sausage, peppers, onions, mushrooms - serves 4-6 people\",\n        price: 28.99,\n        category: \"Specialty Pizzas\",\n        size: \"Extra Large\",\n        image: \"/images/supreme.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-meat\", name: \"Extra Meat\", price: 4.00, type: \"topping\" },\n          { id: \"no-onions\", name: \"No Onions\", price: 0.00, type: \"removal\" },\n          { id: \"extra-sauce\", name: \"Extra Sauce\", price: 1.00, type: \"sauce\" }\n        ]\n      },\n      {\n        id: \"hawaiian-medium\",\n        name: \"Hawaiian Pizza (Medium)\",\n        description: \"Ham, pineapple, mozzarella - serves 2-3 people\",\n        price: 18.99,\n        category: \"Specialty Pizzas\",\n        size: \"Medium\",\n        image: \"/images/hawaiian.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-ham\", name: \"Extra Ham\", price: 2.50, type: \"topping\" },\n          { id: \"no-pineapple\", name: \"No Pineapple\", price: 0.00, type: \"removal\" },\n          { id: \"bacon\", name: \"Add Bacon\", price: 3.00, type: \"topping\" }\n        ]\n      },\n      {\n        id: \"garlic-bread\",\n        name: \"Garlic Bread\",\n        description: \"Fresh baked bread with garlic butter and herbs\",\n        price: 6.99,\n        category: \"Sides\",\n        image: \"/images/garlic-bread.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"extra-garlic\", name: \"Extra Garlic\", price: 0.50, type: \"addition\" },\n          { id: \"cheese-bread\", name: \"Add Cheese\", price: 2.00, type: \"addition\" }\n        ]\n      },\n      {\n        id: \"buffalo-wings\",\n        name: \"Buffalo Wings (10 pieces)\",\n        description: \"Crispy wings tossed in buffalo sauce\",\n        price: 12.99,\n        category: \"Sides\",\n        image: \"/images/wings.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"mild-sauce\", name: \"Mild Sauce\", price: 0.00, type: \"sauce\" },\n          { id: \"hot-sauce\", name: \"Hot Sauce\", price: 0.00, type: \"sauce\" },\n          { id: \"bbq-sauce\", name: \"BBQ Sauce\", price: 0.00, type: \"sauce\" },\n          { id: \"ranch-dip\", name: \"Ranch Dip\", price: 1.00, type: \"addition\" }\n        ]\n      },\n      {\n        id: \"caesar-salad\",\n        name: \"Caesar Salad\",\n        description: \"Romaine lettuce, parmesan, croutons, caesar dressing\",\n        price: 8.99,\n        category: \"Salads\",\n        image: \"/images/caesar.jpg\",\n        available: true,\n        availableCustomizations: [\n          { id: \"grilled-chicken\", name: \"Add Grilled Chicken\", price: 4.00, type: \"protein\" },\n          { id: \"extra-parmesan\", name: \"Extra Parmesan\", price: 1.50, type: \"addition\" }\n        ]\n      },\n      {\n        id: \"coca-cola-2l\",\n        name: \"Coca-Cola (2 Liter)\",\n        description: \"2 liter bottle of Coca-Cola\",\n        price: 3.99,\n        category: \"Drinks\",\n        image: \"/images/coke.jpg\",\n        available: true,\n        availableCustomizations: []\n      },\n      {\n        id: \"tiramisu\",\n        name: \"Tiramisu\",\n        description: \"Classic Italian dessert with coffee and mascarpone\",\n        price: 6.99,\n        category: \"Desserts\",\n        image: \"/images/tiramisu.jpg\",\n        available: true,\n        availableCustomizations: []\n      }\n    ];\n    \n    components.menu.clearMenu();\n    components.menu.addItems(pizzaItems);\n    components.menu.setActiveCategory(\"All Items\");\n    \n    components.ui.showNotification(\n      `🍕 Loaded ${pizzaItems.length} pizza menu items!`, \n      \"success\"\n    );\n    \n    return JSON.stringify({\n      success: true,\n      itemsLoaded: pizzaItems.length,\n      categories: components.menu.getAllCategories(),\n      menu: pizzaItems.map(item => ({ ...item, image: null }))\n    });\n    \n  } catch (error) {\n    components.ui.showNotification(\"Failed to load pizza menu\", \"error\");\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": true,
          "order": 1
        },
        {
          "tool_name": "AddToCart",
          "description": "Add pizza items to cart with size and toppings",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"items\": {\n      \"type\": \"array\",\n      \"properties\": {\n        \"itemId\": {\n          \"type\": \"string\",\n          \"description\": \"ID of the pizza item from menu\"\n        },\n        \"quantity\": {\n          \"type\": \"number\",\n          \"description\": \"Quantity to add\",\n          \"default\": 1\n        },\n        \"customizations\": {\n          \"type\": \"array\",\n          \"description\": \"Array of customization IDs\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"id\": { \n                \"type\": \"string\",\n                \"description\": \"Customization ID from availableCustomizations\"\n              }\n            },\n            \"required\": [\"id\"]\n          }\n        }\n      },\n      \"required\": [\"itemId\"]\n    }\n  },\n  \"required\": [\"items\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed with input:\", JSON.stringify(input, null, 2));\n  \n  try {\n    const items = input.items;\n    const processedItems = [];\n    let totalSavings = 0;\n    \n    for(const element of items) {\n      const item = components.menu.getItemById(element.itemId);\n      \n      if (!item) {\n        components.ui.showNotification(`Item \"${element.itemId}\" not found`, \"error\");\n        continue;\n      }\n\n      const customizations = [];\n      if (Array.isArray(element.customizations)) {\n        for (const cRequested of element.customizations) {\n          const foundCustomization = item.availableCustomizations.find(c => \n            cRequested.id === c.id\n          );\n          if (foundCustomization) {\n            customizations.push(foundCustomization);\n          }\n        }\n      }\n\n      const currentCart = components.cart.getOrderSummary();\n      const largePizzasInCart = currentCart.items.filter(cartItem => \n        cartItem.name.includes('Large') && cartItem.name.includes('Pizza')\n      ).length;\n      \n      let familyDealApplied = false;\n      if (item.name.includes('Large') && item.name.includes('Pizza') && largePizzasInCart >= 1) {\n        familyDealApplied = true;\n        totalSavings += item.price * 0.1;\n      }\n\n      const result = components.cart.addToCart(\n        String(item.id),\n        item.name,\n        item.price,\n        element.quantity || 1,\n        customizations\n      );\n\n      const customizationText = customizations.length > 0 \n        ? ` with ${customizations.map(c => c.name).join(', ')}`\n        : '';\n      \n      let notificationText = `Added ${element.quantity || 1}x ${item.name}${customizationText}`;\n      if (familyDealApplied) {\n        notificationText += ' 🎉 Family Deal Applied!';\n      }\n      \n      components.ui.showNotification(notificationText, \"success\");\n\n      processedItems.push({\n        itemId: element.itemId,\n        itemName: item.name,\n        quantity: element.quantity || 1,\n        customizations: customizations,\n        familyDealApplied: familyDealApplied\n      });\n    }\n\n    const cartSummary = components.cart.getOrderSummary();\n    \n    const result = {\n      success: true,\n      processedItems: processedItems,\n      cartSummary: cartSummary\n    };\n    \n    if (totalSavings > 0) {\n      result.familyDeal = {\n        applied: true,\n        savings: totalSavings,\n        message: `Family Deal: Save $${totalSavings.toFixed(2)} on multiple large pizzas!`\n      };\n    }\n    \n    return JSON.stringify(result);\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    components.ui.showNotification(\"Failed to add item to cart\", \"error\");\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 2
        },
        {
          "tool_name": "GetCurrentCartItems",
          "description": "Get current cart contents and total",
          "inputSchema": {
            "json": "{\n    \"type\": \"object\",\n    \"properties\": {},\n    \"required\": []\n}"
          },
          "script": "async function execute({...args}) {\n  const { components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" executed\");\n  \n  const orderSummary = components.cart.getOrderSummary();\n  \n  return JSON.stringify({\n    success: true,\n    cartSummary: orderSummary,\n    estimatedDeliveryTime: '25-35 minutes'\n  });\n}",
          "run_after_app_init": false,
          "order": 3
        },
        {
          "tool_name": "ShowCategoryItems",
          "description": "Display items from a specific category",
          "inputSchema": {
            "json": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"Category name (Classic Pizzas, Specialty Pizzas, Sides, Salads, Drinks, Desserts)\"\n    }\n  },\n  \"required\": [\"category\"]\n}"
          },
          "script": "async function execute({...args}) {\n  const { input, components, toolName } = args;\n  console.log(\"Tool::Script::\"+toolName+\" showing category:\", input.category);\n  \n  try {\n    components.menu.showCategory(input.category);\n    const items = components.menu.getMenuItems(input.category);\n    \n    components.ui.showNotification(\n      `Showing ${items.length} items in ${input.category}`, \n      \"info\"\n    );\n    \n    return JSON.stringify({\n      success: true,\n      category: input.category,\n      itemCount: items.length,\n      items: items.map(item => ({\n        id: item.id,\n        name: item.name,\n        description: item.description,\n        price: item.price,\n        size: item.size || 'N/A'\n      }))\n    });\n    \n  } catch (error) {\n    console.error(\"Tool::Script::\"+toolName+\" error:\", error);\n    return JSON.stringify({\n      success: false,\n      error: error.message\n    });\n  }\n}",
          "run_after_app_init": false,
          "order": 4
        }
      ],
      "enableSentimentAnalysis": false,
      "autoInitiateConversation": false,
      "initiationAudio": "",
      "companyName": "Tony's Authentic Pizzeria"
    }
  }
}